################################################################################################################
sql.getBranchCutOffTimeNew= select cutof FROM fo_branchcutoff_d WHERE branchid=? AND currencycode=? AND status ='Y'
sql.getInvestmentDates=SELECT investdate, lastbcdate   FROM   fo_acct_investdates_m   WHERE  acctnbr = ?  
sql.getBranchDetails=select descr, bdescr, a.tzcode, acctentitle, sddabal, b.javatzcode from fo_acct_branch_m a, fo_timezone_m b where a.status = ? and branchid = ? and a.tzcode = b.tzcode and b.status = 'Y'
sql.getClientAcctDetails=select distinct a.acctnbr, a.refacctnbr, accttypeid, acctname from fo_spclient_d s, fo_accountmaster_m a where a.acctnbr = s.acctnbr and a.acctnbr = ? and a.companyid = s.clientcompanyid and s.clientcompanyid =? and s.prodid =? and s.status = ? order by a.refacctnbr
sql.getDDABalanceCal=INSERT INTO fo_acct_ddabal_m (acctbal, acctnbr, errorcode, lastrefreshed, msqnum) VALUES (?::NUMERIC, ?, ?, ?, ?)
sql.getDDABalanceCalTwo=SELECT acctbal,lastrefreshed, errorCode FROM fo_acct_ddabal_m WHERE msqnum = ? AND acctnbr =?
sql.getSettlementAccts=SELECT a.acctnbr, acctname,a.nominatedacctnbr, nominatedacctname, refacctnbr, intposttypeid, acctnatureflag ,a.sortcode , c.currencycode  FROM fo_acct_association_m aa , fo_accountmaster_m a, fo_acctcurrency_d c WHERE a.acctnbr = aa.toacctnbr and a.acctnbr =c.acctnbr  and c.status ='Y' AND fromacctnbr = ? AND toacctnbr = ? AND a.status = ? AND aa.status = ? AND fromaccttype = ? AND toaccttype = ? AND groupid = ? ORDER BY acctname, refacctnbr
sql.getlastVolume=SELECT COALESCE(SUM(dollaramount), 0 ) dollaramount FROM fo_trading_t WHERE tradestatus = 'A' AND deskid = ? AND prodid = ? AND transtype = ? AND currencycode = ? AND transdate::DATE > ?::DATE
sql.getlastVolumeone=SELECT COALESCE(SUM(dollaramount), 0 ) dollaramount FROM fo_trading_t WHERE tradestatus = 'A' AND deskid = ? AND prodid = ? AND transtype = ? AND currencycode = ?
sql.getTradingLimits=SELECT rftm, trrt, vollast15mins, volperday, cdtv, amat, smai, lvt, sma, agrfreq, rateinput, cusipflag, noofwithdrawls, rrcode, forwarddatestrades, allowtfn, allowpricerange, allowrollover, ratechangeacceptancemode, allowwire, whenpaymentnotreceived, tradeprocessing FROM fo_tradinglimits_m WHERE groupid =? AND transtype = ?
sql.getTradeTradingLimits=SELECT MINVALUE, MAXVALUE FROM fo_pr_compgrplimit_d WHERE compgrpid = ? AND groupid = ? AND limittypeid = ? AND status = ?
sql.getTodaysTotal=select sum(DOLLARAMOUNT) AMOUNT from VW_TRADEHISTORY_T where ECCOMPANYID = ? and PRODID = ? and CURRENCYCODE = ? and TRANSTYPE = ? and TRADESTATUS = 'a' and TRANSDATE::date = ?::date
sql.getEndBals=SELECT SUM(endbal) endbal, prodid , SUM(endshares) endshares FROM ( SELECT SUM(endbal) endbal, SUM(endshares) endshares, prodid FROM fo_acct_dailybal_m a, fo_accountmaster_m b WHERE a.escrowacctnbr = b.acctnbr AND a.branchid = b.legalentity AND b.status = ? AND ecompanyid = ? AND prodid = ? GROUP BY prodid UNION ALL SELECT SUM ( ( CASE a.transtype WHEN '10' THEN dollaramount ELSE ( CASE a.tradestatus WHEN 'A' THEN ( CASE a.navtype WHEN 'F' THEN dollaramount ELSE 0 END ) ELSE 0 END ) END ) ) endbal, SUM ( ( CASE a.transtype WHEN '10' THEN shares ELSE ( CASE a.tradestatus WHEN 'A' THEN ( CASE a.navtype WHEN 'F' THEN shares ELSE 0 END ) ELSE 0 END) END ) ) endshares, prodid FROM vw_tradehistory_t a, fo_accountmaster_m b WHERE a.escrowacctnbr = b.acctnbr AND a.branchid = b.legalentity AND (a.tradestatus = ? OR (a.tradestatus = ? AND a.ack2time IS NULL)) AND b.status = ? AND eccompanyid = ? AND prodid = ? GROUP BY prodid UNION ALL SELECT SUM(dollaramount) endbal, SUM(shares) endshares, prodid FROM fo_trading_f a, fo_accountmaster_m b WHERE a.escrowacctnbr = b.acctnbr AND a.branchid = b.legalentity AND transid IS NULL AND tradestatus = ? AND b.status = ? AND a.transtype = ? AND eccompanyid = ? AND prodid = ? GROUP BY prodid ) AS alias GROUP BY prodid
sql.getSettlementChildAccounts=SELECT DISTINCT acctnbr FROM fo_accountmaster_m WHERE ddaparent = ? AND accttypeid = ? AND companyid = ? AND status = ?
sql.getMmfMinMaxDollarRanges = 	SELECT min(dollarfrom::bigint) dollarfrom, max(dollarto::bigint) dollarto FROM fo_ratematrix_d r, fo_ratematrixactive_m ra, fo_group_m g WHERE ra.gridid = r.gridid AND ra.groupid = g.groupid AND g.prodid=? AND g.currencycode=? AND g.companyid=? AND ra.transtype=?
sql.getInvPolicyLimitAmt = SELECT rlid, plid, gpid, ltid, ilmt FROM fo_pr_invpolicy_d WHERE gpid = ? AND stat = ? ORDER BY ltid ASC
sql.getAllAccountsForCompany = select distinct a.acctnbr actnbr, a.acctname actname, a.refacctnbr refactnbr, a.acctnatureflag acctnatureflag, '' taxnbr, a.socialcode taxpayerstatuscode, '' taxpayertype from fo_accountmaster_m a  where  a.companyid =? and a.status = ? and a.accttypeid =? order by a.acctname, a.refacctnbr
sql.getSweepMMDDACAssocProducts = select distinct b.prodid, FN_GET_LANG(?, ?, b.prodid) prodname, b.parentid, b.refprodid, g.groupid, g.currencycode from fo_prodcurr_d a, ( select distinct prodid, prodname, parentid, refprodid from fo_product_m where (LENGTH (parentid) <> 4) and status = 'Y')b, fo_group_m g , fo_acct_clientsettlement_m d, fo_accountmaster_m ac, fo_mmf_fund_m fund , fo_productparameter_m pp, fo_group_m dg, fo_company_m c , fo_timezone_m t where a.prodid = ? and b.prodid = g.prodid and g.currencycode = a.currencycode and g.companyid = ( case ? when ? then g.companyid else ? end ) and pp.groupid = dg.groupid and dg.prodid = g.prodid and dg.currencycode = g.currencycode and dg.companyid = c.companyid and c.tzcode = t.tzcode and c.companycatid = '300' and c.status = 'Y' and dg.status = 'Y' and pp.status = 'Y' and a.status = 'Y' and g.status = 'Y' and d.groupid = g.groupid and d.status = 'Y'  and g.currencycode =  ?
sql.checkSPClientAcctStatus =SELECT s.status FROM fo_spclient_d s, fo_member_m m WHERE s.prodid = ?  AND s.salespersonid = m.loginid AND m.membercatid = ? AND s.acctnbr = ? AND s.status = ?
sql.checkSPClientAcctStatus1 =SELECT s.status FROM fo_spclient_d s, fo_member_m m WHERE s.prodid = ? AND s.salespersonid = ? AND s.salespersonid = m.loginid AND m.membercatid = ? AND s.acctnbr = ? AND s.status = ?

sql.getAccountStructure =SELECT b.acctstructypeid, descr FROM fo_accountmaster_m a, fo_company_m b, fo_acct_structype_m c WHERE a.legalentity = b.companyid AND a.acctnbr = ? AND b.acctstructypeid = c.acctstructypeid
sql.getWeekDaysDetails= SELECT dayid, refcode, descr FROM  fo_weekday_m   
sql.getAvailableRules = select * from ( select s.*, count(*) over() as cnt , row_number() over () as rnum from ( select * from ( select rt.*, row_number() over(partition by ruleid order by moddate desc) rn from ( select distinct spr.ruleid, spr.descr rulename, rulemode, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'ddaType') ->> 'value' ), ddatype) else ddatype end ddatype, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'targetBal') ->> 'value' ), targetbal::text) else targetbal::text end targetbal, r.createdby, spr.modifieddate, r.modifiedby modby, r.status mcstatus, r.type as type ,r.action as action, r.processid, ( case r.modifiedby when 'SYSTEM' then 'SYSTEM' else ( select firstname || ' ' || lastname from fo_member_m where loginid = spr.modifiedby ) end ) modifiedby , coalesce ( coalesce ( r.modifieddate , r.approveddate ) , r.createddate ) moddate, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'ruleType') ->> 'value' ), t.description) else t.description end ruletype, case when coalesce(r.processid, 'X') = coalesce(spr.mcprocessid, 'X') then coalesce( (case ((newvalues->'approval') ->> 'value' ) when 'A' then 'Automatic' when 'M' then 'Manual' end ),( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) ) else ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) end approval , ( case r.status when 'P' then 'Waiting for Approval' when 'R' then 'Rejected' when 'A' then 'Active' end ) status from fo_sp_rules_m spr left outer join fo_mc_buildprocess_m r on (r.processid = spr.mcprocessid ), fo_transtype_m t where spr.companyid = ? and spr.status in  (?,?) and spr.transtypeid = t.transtypeid ) rt ) as alias where rn = 1 and mcstatus <> 'N' union select distinct ruleid, descr rulename, rulemode, ddatype, targetbal::text, spr.createdby, spr.modifieddate, '' modby, '' mcstatus,'' as type, '' as action, mcprocessid processid, ( case spr.modifiedby when 'SYSTEM' then 'SYSTEM' else ( select firstname || ' ' || lastname from fo_member_m where loginid = spr.modifiedby ) end ) modifiedby , null::date moddate, t.description ruletype, ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) approval , ( case status when 'P' then 'Waiting for Approval'   when 'Y' then 'Active' when 'N' then 'Inactive' end ) status, 0 rn    from fo_sp_rules_m spr , fo_transtype_m t where companyid = ? and status in (?,?) and spr.transtypeid = t.transtypeid and ruleid not in( select ruleid from ( select * from ( select rt.*, row_number() over(partition by ruleid order by moddate desc) rn from ( select a.ruleid , b.status, b.modifiedby, coalesce ( coalesce ( b.modifieddate , b.approveddate ) , b.createddate ) moddate from fo_sp_rules_m a left outer join fo_mc_buildprocess_m b on (a.mcprocessid = b.processid ) where a.companyid = ? )rt ) as alias1 where rn = 1 and status <> 'N' ) as alias3 ) ) s ) as z
sql.getAvailableRulesOne =select * from ( select s.*, count(*) over() as cnt , row_number() over () as rnum from ( select * from ( select rt.*, row_number() over(partition by ruleid order by moddate desc) rn from ( select distinct spr.ruleid, spr.descr rulename, rulemode, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'ddaType') ->> 'value' ), ddatype) else ddatype end ddatype, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'targetBal') ->> 'value' ), targetbal::text) else targetbal::text end targetbal, r.createdby, spr.modifieddate, r.modifiedby modby, r.status mcstatus,r.type as type, r.action as action, r.processid, ( case r.modifiedby when 'SYSTEM' then 'SYSTEM' else ( select firstname || ' ' || lastname from fo_member_m where loginid = spr.modifiedby ) end ) modifiedby , coalesce ( coalesce ( r.modifieddate , r.approveddate ) , r.createddate ) moddate, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'ruleType') ->> 'value' ), t.description) else t.description end ruletype, case when coalesce(r.processid, 'X') = coalesce(spr.mcprocessid, 'X') then coalesce( (case ((newvalues->'approval') ->> 'value' ) when 'A' then 'Automatic' when 'M' then 'Manual' end ),( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) ) else ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) end approval , ( case r.status when 'P' then 'Waiting for Approval' when 'R' then 'Rejected' when 'A' then 'Active' end ) status from fo_sp_rules_m spr left outer join fo_mc_buildprocess_m r on (r.processid = spr.mcprocessid ), fo_transtype_m t where spr.companyid = ? and spr.status  in (?,?) and spr.transtypeid = t.transtypeid ) rt ) as alias where rn = 1 and mcstatus <> 'N' union select distinct ruleid, descr rulename, rulemode, ddatype, targetbal::text, spr.createdby, spr.modifieddate, '' modby, '' mcstatus, '' as type, '' as action, mcprocessid processid, ( case spr.modifiedby when 'SYSTEM' then 'SYSTEM' else ( select firstname || ' ' || lastname from fo_member_m where loginid = spr.modifiedby ) end ) modifiedby , null::date moddate, t.description ruletype, ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) approval , ( case status when 'P' then 'Waiting for Approval'  when 'Y' then 'Active' when 'N' then 'Inactive' end ) status, 0 rn    from fo_sp_rules_m spr , fo_transtype_m t where companyid = ? and status in (?,?) and spr.transtypeid = t.transtypeid and ruleid not in( select ruleid from ( select * from ( select rt.*, row_number() over(partition by ruleid order by moddate desc) rn from ( select a.ruleid , b.status, b.modifiedby, coalesce ( coalesce ( b.modifieddate , b.approveddate ) , b.createddate ) moddate from fo_sp_rules_m a left outer join fo_mc_buildprocess_m b on (a.mcprocessid = b.processid ) where a.companyid = ? and a.status=? )rt ) as alias1 where rn = 1 and status <> 'N' ) as alias3 ) ) s ) as z
sql.getRuleDetails =  select distinct ruleid, spr.descr rulename, targetbal, rulemode, ddatype, approval, t.transtypeid ruletypeid, t.description ruletype, ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) approvaldesc , ( case spr.status when 'Y' then 'Active' when 'N' then 'Inactive' end ) status , ( case rulemode when 'R' then 'Round Trip' when 'N' then 'Normal' end ) rulemodedesc , targetccy , incramt, trigamt, trigccy, invacct, spr.baltypeid, spb.descr baltypedesc , spr.mcprocessid,spr.createdby from fo_sp_rules_m spr , fo_transtype_m t, fo_sp_balancetype_m spb where ruleid = ? and companyid = ? and spr.transtypeid = t.transtypeid and spr.baltypeid = spb.baltypeid and spr.status ='Y'
sql.getBalanceTypes = SELECT	baltypeid , descr FROM	fo_sp_balancetype_m WHERE	status = 'Y'
sql.getSchedules = SELECT	schtypeid, descr FROM 	fo_sp_schedules_m WHERE	status = 'Y'
sql.getApprovalMode = SELECT approval,transtypeid FROM   fo_sp_rules_m WHERE  ruleid     = ? AND   companyid     = ?
sql.getRuleProductsForPlan =  SELECT m.groupid,m.deskgroupid,a.companyid, 				      a.planid, 				      z.ruleid, 				      a.acctnbr, 				      z.approval, 				      b.exectime, 				      b.holiday, 				      a.createddate, 				      a.createdby, 				      a.status 				 FROM  fo_sp_rules_m z, 				 		fo_sp_ruleproducts_d m, 						fo_sp_ruleaccount_d a, 				 		fo_sp_planschedules_m b 				 WHERE  z.ruleid=a.ruleid 				 AND  	z.ruleid=m.ruleid 				 AND    a.planid=b.planid  				 AND    b.planid = ? 				 AND    m.status = 'Y' 				 AND    a.status = 'Y' 				 AND    schtypeid = ? 				 AND    b.fromdate<=TO_DATE(?,?)  AND coalesce ( b.todate , CURRENT_TIMESTAMP + interval '365 days' ) >=  TO_DATE ( ? , ? ) 
sql.getPlansAssocToRule =  SELECT DISTINCT planid  FROM fo_sp_ruleaccount_d a, fo_sp_rules_m b 	WHERE a.ruleid = b.ruleid  AND   b.status =  ?  AND   a.status = ?    							 AND   b.ruleid = ? 
sql.getProductName = SELECT prodname FROM fo_group_m g,fo_product_m p WHERE groupid =? AND g.prodid=p.prodid
sql.getRuleFailureRecord =  SELECT a.runid, a.companyid,a.ddaacctnbr,a.acctnbr,	a.groupid,a.ruleid, a.planid,a.transtypeid,a.rulemode,a.reason,a.status,a.createddate,e.sweepcutoff,c.dpool,b.deskgroupid,b.execdate,b.exectime, c.value,c.amtpcnt,c.ddaacct,d.incramt,	c.maxamt,d.targetbal,d.targetccy,d.trigamt,d.trigccy,d.baltypeid,d.createdby,d.ddatype,	a.overridebal,a.tradeamount FROM fo_sp_productrunfailure_d a,fo_sp_run_d b,fo_sp_ruleproducts_d c,fo_sp_rules_m d,fo_productparameter_m e WHERE	a.runid	= b.runid AND a.planid   = b.planid AND a.ruleid   = b.ruleid	AND a.ruleid   = d.ruleid AND b.deskgroupid =c.deskgroupid AND a.groupid  = c.groupid	AND c.ruleid   = d.ruleid AND c.deskgroupid = e.groupid	 	AND a.runid   = ?				 	AND a.groupid = ?									 	AND a.execdate= ?									 	AND a.createddate = ?									AND a.status = ?        						AND c.status = 'Y'        
sql.getRuleFailureUpdate = UPDATE	fo_sp_productrunfailure_d SET	status =?, overridebal =? 	WHERE	runid   = ? AND groupid = ?	AND execdate= ?	AND status = ?        
sql.getFailedRecordDetails =  SELECT DISTINCT a.runid,b.descr rulename,	 b.ddatype, c.planname,prod.prodname,  a.groupid, a.ddaacctnbr, a.companyid, a.swpacctnbr,coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.swpacctnbr),'') swpacctname,coalesce((SELECT refacctnbr FROM fo_accountmaster_m	WHERE acctnbr = a.swpacctnbr),'') swprefacctnbr,(CASE WHEN a.ddaacctnbr IS NOT NULL THEN    (SELECT acctbal FROM fo_acct_stalebal_m WHERE acctnbr = a.ddaacctnbr) ELSE 0 END )acctbal,  (CASE WHEN a.ddaacctnbr IS NOT NULL THEN (SELECT lastrefreshed FROM fo_acct_stalebal_m	WHERE acctnbr = a.ddaacctnbr) ELSE '' END )lastrefreshed,coalesce((SELECT refacctnbr FROM fo_accountmaster_m WHERE acctnbr = a.ddaacctnbr),'') ddarefacctnbr,coalesce((SELECT acctname FROM fo_accountmaster_m	WHERE acctnbr = a.ddaacctnbr),'') ddaacctname,acct.refacctnbr||'-'||acct.acctname accountname,a.value,a.amtpcnt,case when a.amtpcnt = '1' then 'Amount' else 'Percentage' end typedesc,a.transtypeid, t.description transtype ,a.incramt,a.maxamt,case when a.rulemode = 'R' then 'Round Trip' else 'Normal' end rulemodedesc,a.targetbal,a.targetccy,a.trigamt,a.trigccy,bal.descr baltypeid,m.firstname || m.lastname createdby,a.execdate,a.exectime,a.createddate,a.reason,a.status,a.modifieddate,a.tradeamount,cm.companyname FROM fo_sp_productrunfailure_d a,fo_sp_rules_m b,fo_sp_ruleaccount_d c,fo_transtype_m t,fo_group_m g,fo_sp_run_d d,fo_accountmaster_m acct ,fo_product_m prod ,fo_sp_balancetype_m bal , fo_member_m m , fo_company_m cm WHERE g.companyid = case when ? = ? then g.companyid else ? end AND g.groupid = a.groupid and g.status = ?  AND g.prodid = prod.prodid                       									AND a.ruleid= b.ruleid																AND a.planid = c.planid	 AND t.transtypeid = a.transtypeid 	AND a.acctnbr = c.acctnbr   AND c.companyid = a.companyid   AND b.companyid = a.companyid   and cm.companyid = c.companyid	AND d.runid = a.runid  AND a.acctnbr = acct.acctnbr 	AND a.baltypeid = bal.baltypeid  	AND a.createdby = m.loginid	AND a.runid   = ? 	 	AND a.groupid = ?																 	AND a.execdate= ?																 	AND a.createddate = ?
sql.getMaxAmtQuery = SELECT maxamt FROM fo_sp_ruleproducts_d WHERE ruleid = ? AND deskgroupid =? AND status = ?
sql.getSweepFundAccountDetails =  SELECT DISTINCT act2.acctnbr,act2.refacctnbr,act2.maxamt,act2.acctname,ast.descr acctstruc,act2.fundacctnbr,( case act2.divtype  when 'R' then '100' when 'C' then '101' end )  divtype FROM fo_acct_association_m a,fo_acct_association_m a1, fo_accountmaster_m act1, fo_accountmaster_m act2,fo_acct_structype_m ast  WHERE a.fromacctnbr = act1.acctnbr  	AND   act1.acctnatureflag = ?  AND   a.groupid = a1.groupid  AND   a.groupid = ? AND   a1.fromacctnbr = act2.acctnbr AND   ast.acctstructypeid = act2.acctstructypeid AND   ast.accttypeid = act2.accttypeid AND   act2.acctnatureflag = ?  AND   a.toacctnbr = a1.fromacctnbr  AND   a.fromacctnbr = ? AND   a1.toacctnbr= ?  AND   a1.intposttypeid= ?  AND   a.status ='Y' 	AND   a1.status = 'Y'  AND   act1.status = 'Y'  AND   act2.status='Y' 	
sql.getInactiveSweepFundAccountDetails =  SELECT     a.acctnbr,a.refacctnbr,a.maxamt, a.acctname,c.descr acctstruct,a.fundacctnbr FROM       fo_accountmaster_m a,fo_company_m b,fo_acct_structype_m c   WHERE      acctnbr= ?  AND        a.companyid=b.companyid  AND        a.acctstructypeid = c.acctstructypeid AND        a.accttypeid = c.accttypeid 
sql.getOtherAcctsAvail =  SELECT a.refacctnbr,case when b.acctbal = 'F' then 'Failed'	when b.acctbal = 'E' then 'Failed' else trim(to_char(round(b.acctbal::numeric, 2), '9G999G999G999G999G999G999G999G999G999G999D99')) end acctbal,b.acctnbr,b.lastrefreshed FROM	fo_accountmaster_m a,fo_sp_realbal_d b,	(SELECT	b.acctnbr,MAX(b.createddate) createdate	FROM	fo_sp_realbal_d b WHERE	runid=?	GROUP BY b.acctnbr)r  WHERE	b.createddate=r.createdate AND	b.acctnbr=r.acctnbr AND	a.acctnbr=r.acctnbr		
sql.getMCRuleDetails =  select * from ( select rt.*, row_number () over (partition by ruleid order by moddate desc)rn from ( select distinct spr.ruleid, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'rulename') ->> 'value' ), spr.descr::text) else spr.descr::text end rulename, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'targetBal') ->> 'value' ), targetbal::text) else targetbal::text end targetbal, rulemode, ddatype, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'approval') ->> 'value' ), approval::text) else approval::text end approval, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'rulemode') ->> 'value' ), rulemode::text) else rulemode::text end rulemode, r.processid, t.transtypeid ruletypeid, t.description ruletype, ( case approval when 'A' then 'Automatic' when 'M' then 'Manual' end ) approvaldesc , ( case spr.status when 'Y' then 'Active' when 'N' then 'Inactive' end ) status , ( case rulemode when 'R' then 'Round Trip' when 'N' then 'Normal' end ) rulemodedesc , case when r.processid = spr.mcprocessid then coalesce(((newvalues->'targetccy') ->> 'value' ), targetccy::text) else targetccy::text end targetccy, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'incramt') ->> 'value' ), incramt::text) else incramt::text end incramt, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'trigamt') ->> 'value' ), trigamt::text) else trigamt::text end trigamt, case when r.processid = spr.mcprocessid then coalesce(((newvalues->'trigccy') ->> 'value' ), trigccy::text) else trigccy::text end trigccy, invacct, spr.baltypeid, spb.descr baltypedesc, r.status mcstatus, r.createdby, r.createddate, r.modifieddate, r.modifiedby, coalesce ( coalesce (r.modifieddate, r.approveddate), r.createddate) moddate from fo_mc_buildprocess_m r right outer join fo_sp_rules_m spr on (r.processid = spr.mcprocessid ), fo_transtype_m t, fo_sp_balancetype_m spb where spr.ruleid = ? and spr.companyid = ? and spr.transtypeid = t.transtypeid and spr.baltypeid = spb.baltypeid
sql.getMCAssocRuleProdDetails =  select * from ( select rt.*, row_number () over (partition by groupid, ddaacct order by moddate desc)rn from ( select sr.ruleid, sr.status, srp.groupid, srp.deskgroupid, srp.mmfacctnbr, sr.transtypeid, grp.prodid, p.prodname, grp.currencycode, amtpcnt, '' fundacctnbr, ( with recursive t as ( select prodid, parentid from fo_product_m where prodid = p.prodid union all select t_2.prodid, t_2.parentid from fo_product_m as t_2, t where t.parentid = t_2.prodid ) select prodid from t where parentid = '0000' ) parentid, ( with recursive t as ( select prodid, parentid, prodname from fo_product_m where prodid = p.prodid union all select t_2.prodid, t_2.parentid, t_2.prodname from fo_product_m as t_2, t where t.parentid = t_2.prodid ) select prodname from t where parentid = '0000' ) parentprodname, srp.ddaacct, srp.dpool, ( case amtpcnt when '1' then 'Amount' when '2' then 'Percentage' end ) typedesc , VALUE, srp.maxamt, sortorder, r.status mcstatus, r.createdby, r.createddate, r.modifieddate, r.modifiedby, coalesce ( coalesce (r.modifieddate, r.approveddate), r.createddate ) moddate, srp.mmfacctnbr, f.nav, f.navtype from fo_sp_rules_m sr  left outer join fo_mc_buildprocess_m r on (r.processid = sr.mcprocessid ), fo_sp_ruleproducts_d srp, fo_group_m grp, fo_product_m p, fo_mmf_fund_m f where sr.ruleid = srp.ruleid and srp.groupid = grp.groupid
sql.getExistRules =  select a.ruleid, a.descr from fo_sp_rules_m a, fo_sp_ruleproducts_d b where a.ruleid = b.ruleid and a.invacct = ? and b.ddaacct = ? and b.groupid = ? and a.status = ? and b.status = ? 			
sql.getOtherFailedRecords =  SELECT a.runid,a.groupId,a.execDate,a.createdDate,	a.ddaacctnbr,a.overridebal FROM	fo_sp_productrunfailure_d a,fo_sp_productrunfailure_d b WHERE	a.ruleid =b.ruleid AND	b.runid= ? AND	a.runid!=? AND	b.ddaacctnbr=a.ddaacctnbr AND	b.amtpcnt='2' AND	b.transtypeid= ? AND	a.status='F' AND	b.execDate=a.execDate	AND	TRUNC(a.execdate)  = TRUNC(to_date(?,?)) AND	TRUNC(b.execdate)  = TRUNC(to_date(?,?))					
sql.updateBalanceRunDetails = UPDATE	fo_balrun_m SET	status = 'Y' WHERE	status='P'
sql.setSweepCutoff =  UPDATE	fo_productparameter_m p	SET	sweepcutoff = (SELECT	c.endtime FROM	fo_group_m g, fo_pr_cutofftimes_m c WHERE	c.groupid = p.groupid AND		c.groupid = g.groupid AND TRUNC(c.cutoffdate) = TRUNC(FN_GET_GROUP_TZTIME(c.groupid)) AND g.companyid = ? AND	c.status = 'Y')	WHERE	groupid IN (SELECT	groupid	FROM	fo_group_m WHERE	companyid =?)
sql.getRuleFailureErrors =  SELECT msgcode,descr FROM   fo_sp_failmessage_m WHERE severity=  ( case ?::int when 0 then severity else  ?::int end )	ORDER BY severity			
sql.getSeverityDetails = SELECT severity , descr from  fo_sp_severity_m ORDER BY severity
sql.resetSweepStatus = UPDATE fo_sp_run_d SET	status = 'Y' WHERE	status in ('S','N') AND	deskgroupid IN (SELECT	groupid FROM fo_group_m WHERE companyid = ? AND status = 'Y')
sql.getSweepHiddenRunDetails= SELECT a.runid, case  a.status 	when 'P' then 'Processing' when 'Y' then 'Active'  when 'S' then 'Success' else 'Failed' end  status, b.rulemode,  case   a.approval    when 'A' then 'No' else (CASE  WHEN EXECDATE <= ? THEN   (CASE WHEN rulemode = 'N'   THEN   (CASE WHEN TO_DATE (REPLACE ( TO_CHAR ( (?)::date, 'DD-MON-YYYY ')  || coalesce (coalesce (sweepcutoff, ENDTIME), '05:30 PM'), '00:', '12:'), 'DD-MON-YYYY HH:MI PM')  <= ((?)::date  + coalesce (a.exectime, 30::text)::int / 1440)   THEN  'Yes'  ELSE 'No'  END) WHEN rulemode = 'R' AND a.transtypeid = '20'  THEN (CASE WHEN TO_DATE ( REPLACE (TO_CHAR ( (?)::date, 'DD-MON-YYYY ') || coalesce (coalesce (BEGINTIME, ENDTIME),  '05:30 PM'), '00:', '12:'), 'DD-MON-YYYY HH:MI PM') < ((?)::date - coalesce (1, 1) / 1440) THEN 'Yes' ELSE 'No'  END) WHEN rulemode = 'R' AND a.transtypeid = '10' THEN (CASE  WHEN TO_DATE ( REPLACE ( TO_CHAR ( (?)::date, 'DD-MON-YYYY ')  || coalesce (coalesce (sweepcutoff, ENDTIME), '05:30 PM'),'00:',  '12:'),   'DD-MON-YYYY HH:MI PM') <= (  (?)::date + coalesce (a.exectime, 30::text)::int / 1440)  THEN  'Yes' ELSE    'No' END)  END)ELSE 'No' END) end  run FROM    fo_sp_run_d a,fo_sp_rules_m b,fo_sp_ruleaccount_d c,fo_sp_ruleproducts_d z,	fo_productparameter_m g,	fo_group_m e WHERE    a.ruleid=b.ruleid AND      b.ruleid=c.ruleid AND      z.RULEID = b.ruleid AND      z.deskgroupid = a.deskgroupid AND      a.deskgroupid = g.groupid AND      c.planid=a.planid AND      c.status = ?	AND      z.status = ? AND      b.status = ? 	AND      a.companyid=c.companyid AND      a.acctnbr=c.acctnbr 	AND      a.acctnbr=c.acctnbr AND 	 g.groupid=e.groupid	AND    EXISTS (SELECT DISTINCT b.companyid FROM   fo_company_m b,fo_accountmaster_m WHERE  b.companyid = c.companyid   AND	a.companyid = b.companyid AND  EXISTS (SELECT companyid FROM fo_up_company_m WHERE status = ?AND loginid = ?	AND	companyid = c.legalentity)AND    companycatid= ?   AND    b.status = ? AND    c.status = ? AND    accttypeid= ? )AND      a.approval=? AND a.execdate BETWEEN	? AND ?		
sql.updatePedt = UPDATE fo_sp_run_d SET    pedt = ? WHERE  runid      	= ?
sql.disableEnableRuleSelect = SELECT	COUNT(*) cnt FROM	fo_sp_ruleproducts_d WHERE	ruleid= ? AND	status = 'Y'
sql.disableEnableRuleUpdate = UPDATE	fo_sp_rules_m SET	status = ?, modifiedby = ?, modifieddate = ? WHERE	ruleid = ?
sql.delRuleDetailsSelect = SELECT DISTINCT spr.ruleid, spr.descr rulename, a.planid, planname, invacct, spr.companyid, spr.status FROM fo_sp_rules_m spr, fo_sp_ruleaccount_d a, fo_sp_planschedules_m b WHERE spr.ruleid = ? AND spr.companyid = ? AND a.planid = b.planid AND a.ruleid = spr.ruleid AND spr.status = 'Y'
sql.delRuleDetailsSelectTwo = SELECT DISTINCT spr.ruleid, spr.descr rulename, a.planid, planname, spr.invacct, spr.companyid, spr.status FROM fo_sp_rules_m spr, fo_sp_ruleaccount_d a, fo_sp_planschedules_m b WHERE spr.companyid = ? AND a.planid = b.planid AND a.ruleid = spr.ruleid AND spr.ruleid = ? AND spr.status = 'Y'
sql.setPlanDetailsSelect = SELECT DISTINCT planid FROM   fo_sp_ruleaccount_d WHERE planid=? AND companyid=?
sql.setPlanDetailsDeleteOne = DELETE FROM  fo_sp_ruleaccount_d WHERE planid=? AND companyid=?
sql.setPlanDetailsDeleteTwo = DELETE FROM  fo_sp_planschedules_m WHERE planid=?
sql.setPlanDetailsDeleteThree = DELETE FROM  fo_sp_planschedules_d WHERE planid=?
sql.setPlanDetailsDeleteFour = DELETE FROM  fo_concentration_exectime_d WHERE planid=?
sql.setPlanDetailsInsertOne = INSERT INTO fo_sp_ruleaccount_d (acctnbr, ruleid, planid, andor, sortorder, status, createddate, createdby, planname, plantype, ddaacctnbr, companyid,mcprocessid) VALUES( ?, ?, ?, ?::smallint, ?::smallint, ?, ?, ?, ?, ?, ?, ?,?)
sql.setPlanDetailsInsertTwo = INSERT INTO fo_sp_planschedules_d (specseqid, planid, specday, specdate, status) VALUES( ?, ?, ?::smallint, current_timestamp, ?)
sql.setPlanExeDetailsInsertThree = insert into fo_concentration_exectime_d (execId,planId,schtypeid,exectype,exectime,status) values (?,?,?,?,?,?)

sql.setPlanRunDetailsSelect = SELECT runid FROM  fo_sp_run_d a WHERE   a.planid=? AND a.ruleid=? AND  a.companyid=? AND a.acctnbr=? AND a.transtypeid=? AND  a.deskgroupid=?
sql.setPlanRunDetailsUpdate = UPDATE fo_sp_run_d SET approval = ?, deskgroupid = ?, execdate = ?, aedt = ?, exectime = ?, createddate = ?, createdby = ?, status = ?, ddaacctnbr = ?, dpool = ?, availablebal = coalesce(?::numeric,0) WHERE runid = ? AND planid = ? AND ruleid = ? AND companyid = ? AND acctnbr = ? AND transtypeid = ?
sql.setPlanRunDetailsInsert = INSERT INTO fo_sp_run_d (runid, companyid, planid, ruleid, acctnbr, approval, deskgroupid, execdate, aedt, exectime, createddate, createdby, status, ddaacctnbr, transtypeid, availablebal, dpool) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, coalesce(?::numeric,0), ?)
sql.setPlanRunDetailsDelete = DELETE FROM fo_sp_run_d WHERE runid=? AND  planid=? AND ruleid=? AND companyid=? AND  acctnbr=? AND  transtypeid=?
sql.deleteRuleswithUniqueProdSelect = SELECT COUNT(*) cnt FROM fo_sp_ruleproducts_d WHERE ruleid= ? AND  status = 'Y'
sql.getSettlementAccountsForCcy = SELECT DISTINCT a.refacctnbr,a.acctnbr,a.acctname,a.nominatedacctnbr,a.nominatedacctname, ( SELECT count(*) FROM fo_accountmaster_m e WHERE e.ddaparent = a.acctnbr ) childAvailCnt FROM fo_accountmaster_m a, fo_acctcurrency_d c WHERE a.companyid = ? AND c.currencycode = ? AND a.acctnbr = c.acctnbr AND a.status = 'Y' AND c.status = 'Y'  and a.accttypeId='209'
sql.getSweepStatement1 = SELECT escrowacctnbr,sourceid,createddate, entrytypeid, amount, balance, beginbal, endbal, mtd, shares, beginshares, endshares, mtdshares,NAV FROM fo_acct_balentry_d WHERE parentprodid = '1700' and entrytypeid in ('100','102') and createddate between ?::DATE and ?::DATE AND escrowacctnbr =? order by escrowacctnbr,ACCTBALENTRYID
sql.getSweepStatement = SELECT escrowacctnbr, createddate, beginbal, endbal,(endbal - beginbal) netchage, mtd, ytd,prodname FROM (SELECT escrowacctnbr,(SELECT beginbal FROM fo_acct_dailybal_d d WHERE d.escrowacctnbr = dt.escrowacctnbr AND createddate = (SELECT min (createddate) FROM fo_acct_dailybal_d da WHERE da.escrowacctnbr = d.escrowacctnbr AND createddate >= ?::DATE ) ) beginbal,endbal, mtd, mtda, ytd, createddate,(select prodname from fo_product_m where prodid = dt.prodid)prodname FROM fo_acct_dailybal_d dt WHERE createddate = (SELECT MAX (createddate) FROM fo_acct_dailybal_d d WHERE dt.escrowacctnbr = d.escrowacctnbr AND createddate <=?::DATE)
sql.updatetracksettlement = UPDATE  FO_ACCT_TRACKSETTLEMETHOD_M SET status = 'A' WHERE   status   = 'P'
sql.delPlanDetailsUpdateOne = UPDATE fo_sp_ruleaccount_d SET    status='N',modifieddate=?,modifiedby=? WHERE	planid = ? AND 	companyid = ?
sql.delPlanDetailsDelete = DELETE FROM fo_sp_run_d WHERE planid=? AND  companyid=? AND        execdate >= ?
sql.delPlanDetailsUpdateTwo = UPDATE fo_sp_planschedules_m SET  status='N' WHERE planid = ?
sql.delPlanDetailsSelect = SELECT * FROM fo_sp_planschedules_d WHERE	planid = ?
sql.delPlanDetailsUpdateThree = UPDATE fo_sp_planschedules_d SET    status='N' WHERE	planid = ?
sql.delPlanDetailsSelectTwo = SELECT * FROM fo_sp_ruleexceptons_m WHERE	planid = ?
sql.delPlanDetailsUpdateFour = UPDATE fo_sp_ruleexceptons_m SET    status='N' WHERE	planid = ?
sql.getSweepsProductTradeDeskId = SELECT prodname FROM fo_group_m g, fo_product_m p WHERE groupid =? AND g.prodid=p.prodid
sql.getPlanDetailsOne = SELECT a.planid, planname, acctnbr, a.companyid, plantype plantypeid, a.dpool, (SELECT refacctnbr || '-'|| acctname FROM fo_accountmaster_m WHERE acctnbr=a.acctnbr)account, ( case plantype when 'S' then 'Single' else 'Multiple' end ) plantype, andor andorid, ( case andor when '0' then 'AND' else 'OR' end ) andor, sortorder, a.ruleid, a.ddaacctnbr, c.rulemode, c.ddatype, c.descr rulename, b.schtypeid, d.descr, b.fromdate, b.todate, b.exectime, c.invacct, c.ddaacct, b.holiday holidayid, ( case b.holiday when 'S' then 'Skip' when 'B' then 'Before' else 'After' end ) holiday,b.executiontype,b.executiontime  FROM fo_sp_ruleaccount_d a, fo_sp_planschedules_m b, fo_sp_schedules_m d, fo_sp_rules_m c WHERE a.companyid=? AND a.planid =b.planid AND a.ruleid =c.ruleid and b.schtypeid=d.schtypeid
sql.getPlanDetailsTwo = SELECT DISTINCT a.planid, specday, (SELECT descr FROM fo_weekday_m WHERE dayid=specday ) as day, specdate, schtypeid, c.executiontype,c.executiontime FROM fo_sp_ruleaccount_d a, fo_sp_planschedules_d b, fo_sp_planschedules_m c WHERE a.planid =b.planid AND c.planid =b.planid AND b.planid=?
sql.getPlanExecutionDetails = select  e.planid, e.schtypeid , e.execid, e.exectime, e.exectype from   fo_concentration_exectime_d e where  e.planid = ? and status = ? 
sql.getPlanDetailsThree = SELECT DISTINCT a.planid, daydate, exceptdate, exceptday, (SELECT descr FROM fo_weekday_m WHERE dayid=exceptday ) as day FROM fo_sp_ruleaccount_d a, fo_sp_ruleexceptons_m b WHERE a.planid =b.planid AND b.planid=?
sql.getSweepDeatilsQuery = SELECT DISTINCT acct2.acctnbr, b.groupid, a.invacct, a.companyid,a.mcprocessid, acct2.status, b.ddaacct, a.descr, c.companyname, acct2.acctname sweepacct, acct1.acctname, p.prodname, acct2.refacctnbr sweepacctnbr, b.value, (SELECT acctname || '-' || refacctnbr ddaacct FROM fo_accountmaster_m WHERE acctnbr = b.ddaacct) pddacct, (SELECT companyname FROM fo_company_m aa, fo_accountmaster_m b WHERE b.legalentity = aa.companyid AND b.acctnbr = a.invacct) busentity, case when b.amtpcnt = '1' then 'Amount' else 'Percentage' end as type, b.maxamt, p.prodid, m.nav, m.navtype FROM fo_accountmaster_m acct1, fo_settlementaccounts_m acct2, fo_acct_association_m ac1, fo_acct_clientsettlement_m ac2, fo_sp_rules_m a, fo_sp_ruleproducts_d b, fo_company_m c, fo_group_m g, fo_product_m p, fo_mmf_fund_m m WHERE a.ruleid = ? AND a.ruleid = b.ruleid AND ac1.fromacctnbr = acct1.acctnbr AND ac1.groupid = ac2.groupid AND ac1.groupid = b.groupid AND ac2.acctnbr = acct2.acctnbr AND ac1.fromacctnbr = a.invacct AND ac2.acctnbr = b.ddaacct AND acct1.status = 'Y' AND ac1.status = 'Y' AND ac2.status = 'Y' AND b.status = 'Y' AND acct1.acctnatureflag = '100' AND c.companyid = acct1.companyid AND c.companyid = g.companyid AND b.groupid = g.groupid AND c.companyid = a.companyid AND g.prodid = p.prodid AND p.prodid = m.fundnbr AND m.status = 'Y'
sql.getRuleProductDetails = SELECT b.deskgroupid, p.prodid, p.prodname, b.ddaacct, g.currencycode FROM fo_sp_rules_m a, fo_sp_ruleproducts_d b, fo_group_m g, fo_product_m p WHERE a.ruleid = b.ruleid AND b.deskgroupid = g.groupid AND g.prodid = p.prodid AND a.ruleid = ? AND g.status = 'Y' AND a.status = 'Y' AND b.status = 'Y' AND p.status = 'Y'
sql.getRulesWithDeletedProduct = SELECT DISTINCT COUNT (*) OVER (PARTITION BY ruleid) AS cnt, ruleid FROM fo_sp_ruleproducts_d WHERE ruleid IN ( SELECT DISTINCT a.ruleid FROM fo_sp_ruleproducts_d a, fo_sp_rules_m b WHERE a.ruleid = b.ruleid AND b.status = 'Y' AND a.groupid = ? AND a.ddaacct = ? AND b.invacct = ?) AND status = 'Y'
sql.getSpecialCutOffTime = SELECT DISTINCT (TO_CHAR ( TO_DATE ( case when SUBSTR (endtime, 1, 2)= '00' then '12' else SUBSTR (endtime, 1, 2) end || SUBSTR (endtime, 3), 'HH:MI PM')- (r.exectime::INT / 1440),'HH:MI PM')) cutoff FROM fo_sp_ruleproducts_d p, fo_sp_run_d r, fo_sp_rules_m m, fo_pr_cutofftimes_m s WHERE p.deskgroupid=s.groupid AND p.ruleid=r.ruleid AND r.ruleid=m.ruleid AND p.deskgroupid=r.deskgroupid AND p.status='Y' AND m.status='Y' AND s.status='Y' AND p.deskgroupid=? AND m.ruleid=? AND s.transtype=? AND s.cutoffdate=to_date(?,'yyyy-mm-dd')
sql.getBranchCutOffTime = SELECT DISTINCT (TO_CHAR(TO_DATE(case when SUBSTR(cutof,1,2) = '00' then '12' else SUBSTR(cutof ,1,2) end||SUBSTR(cutof,3),'HH:MI PM') - (r.exectime::INT/1440),'HH:MI PM')) CUTOFF, t.javatzcode FROM fo_acct_branch_m a, fo_accountmaster_m b, fo_branchcutoff_d c, fo_sp_ruleproducts_d p, fo_productparameter_m pp, fo_group_m g, fo_sp_run_d r, fo_sp_rules_m m, fo_timezone_m t WHERE a.branchid=b.actbranchid AND b.actbranchid=c.branchid AND p.deskgroupid=g.groupid AND pp.groupid=g.groupid AND pp.ccot='Y' AND b.acctnbr=p.ddaacct AND b.status='Y' AND b.acctnbr=? AND b.extbrcutoff='N' AND c.currencycode=g.currencycode AND c.status='Y' AND p.ruleid=r.ruleid AND r.ruleid=m.ruleid AND p.deskgroupid=r.deskgroupid AND p.status='Y' AND m.status='Y' AND g.status='Y' AND t.tzcode=a.tzcode AND pp.status='Y' AND p.deskgroupid=? AND m.ruleid=?
sql.isRuleExist = SELECT COUNT(DISTINCT a.ruleid)cnt FROM fo_sp_rules_m a, fo_sp_ruleproducts_d b, fo_product_m p, fo_group_m g WHERE a.ruleid = b.ruleid AND g.groupid = b.groupid AND g.prodid = p.prodid AND g.status = 'Y' AND p.status = 'Y' AND a.status = 'Y' AND b.status = 'Y' AND p.prodid = ?
sql.saveRealBalDetails = INSERT INTO fo_sp_realbal_d (runid,acctnbr,lastrefreshed,acctbal,status) VALUES (?,?,?,?,?)
sql.saveRealBalDetailsDelete = delete from fo_acct_ddabal_m WHERE	msqnum = ? AND acctNbr=?
sql.getAccountDetailsForSweep = SELECT acctnbr, a.companyid, refacctnbr, extbrcutoff, acctname, accttypeid, a.parentid, a.status, a.taxid, m.taxpayertype, m.taxpayerstatuscode, m.taxnbr, socialcode, (SELECT description FROM fo_socialcodes_m WHERE socialcode=socialid) description, settlementdesc, remarks1, remarks2, remarks3, escrow, a.createddate, a.createdby, a.modifieddate mdate, a.modifiedby, settleid, cprf, location, ppno, regulatorycategoty, bankid, acctnatureflag, domintlflag, parentacctid, bankname, bankcode, banklocation, bankacctnbr, bankacctname, glaccountnumber, a.legalentity, b.companyname, a.enterpriseid, a.actbranchid, a.bankidtype, a.routingcode, a.settlemethod FROM fo_accountmaster_m a, fo_company_m b, fo_tax_m m WHERE acctnbr= ? AND a.companyid=b.companyid AND a.taxid=m.taxid
sql.getRunIdsSelect = SELECT a.runid, a.status, a.execdate, a.aedt, a.exectime, c.descr, c.approval, a.deskgroupid, c.rulemode, c.ddatype, d.ddaacct, a.transtypeid FROM fo_sp_run_d a, fo_group_m b, fo_sp_rules_m c, fo_sp_ruleproducts_d d WHERE b.groupid = a.deskgroupid AND b.status = 'Y' AND a.ruleid = c.ruleid AND c.ruleid = d.ruleid AND a.deskgroupid = d.deskgroupid AND d.status = 'Y' AND b.companyid = ? AND c.approval = 'A'
sql.setSweepRunHistorySelect = SELECT d.runid, d.ruleid, d.execdate, d.modifieddate, d.availablebal, d.availabletype, m.transtypeid, m.rulemode FROM fo_sp_run_d d, fo_sp_rules_m m, fo_group_m g WHERE d.ruleid = m.ruleid AND g.groupid = d.deskgroupid AND g.companyid = ? AND g.status = ? AND m.status = ? AND TRUNC(d.execdate) = TRUNC(To_date(?,?))
sql.setSweepRunHistoryInsert = INSERT INTO fo_sp_run_h (runid, ruleid, execdate, modifieddate, availablebal, availabletype, transtypeid, rulemode) VALUES (?, ?, ?, ?, ?::numeric, ?, ?, ?)
sql.getAssocRuleProdDetails = SELECT sr.ruleid, sr.status, srp.groupid, srp.deskgroupid, srp.mmfacctnbr, sr.transtypeid, grp.prodid, p.prodname, grp.currencycode, amtpcnt, ( WITH RECURSIVE t AS ( SELECT prodid,parentid FROM fo_product_m WHERE prodid = p.prodid UNION ALL SELECT t_2.prodid, t_2.parentid FROM fo_product_m AS t_2, t WHERE t.parentid = t_2.prodid ) SELECT prodid FROM t WHERE parentid = '0000' ) parentid, ( WITH RECURSIVE t AS ( SELECT prodid,parentid,prodname FROM fo_product_m WHERE prodid = p.prodid UNION ALL SELECT t_2.prodid, t_2.parentid,t_2.prodname FROM fo_product_m AS t_2, t WHERE t.parentid = t_2.prodid ) SELECT prodname FROM t WHERE parentid = '0000' ) parentprodname, srp.ddaacct, srp.dpool, ( case amtpcnt when '1' then 'Amount' when '2' then 'Percentage' end ) typedesc , value, srp.maxamt, sortorder,f.nav ,f.navtype,sr.rulemode,sr.DDATYPE,TARGETBAL,TARGETCCY,INCRAMT, TRIGAMT, APPROVAL, sr.NATURE, INVACCT,sr.COMPANYID,transtypeid RULETYPE FROM fo_sp_rules_m sr, fo_sp_ruleproducts_d srp, fo_group_m grp, fo_product_m p, FO_MMF_FUND_M f WHERE sr.ruleid = srp.ruleid AND srp.groupid = grp.groupid
sql.setMMMFProdAccountInfo  = INSERT INTO fo_accountmaster_m (acctnbr,acctname,longname,clientidentifier,accttypeid,refacctnbr,companyid,parentid,settlementdesc,createdby,createddate,	taxid,socialcode,remarks1,remarks2,remarks3,legalentity,bankcode,bankname,escrow,acctnatureflag,divtype,acctstructypeid,fundacctnbr,ppno) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)	
sql.setMMMFProdAccounttaxInfo  =INSERT INTO fo_tax_m (taxid,taxpayertype,taxpayerstatuscode,taxnbr)VALUES (?,?,?,?)
sql.setAccountAssociation  = Insert into fo_acct_association_m (groupid,fromacctnbr,toacctnbr,fromaccttype,toaccttype,status,createddate,createdby,intposttypeid) values (?,?,?,?,?,?,?,?,?)
sql.getSweepsTodaysOnlineData = SELECT * FROM (SELECT a.*, CASE WHEN a.tradetype IN ('R', 'B', 'F', 'D', 'I') THEN CASE WHEN m.membercatid = '4' THEN 'Regular - Self Service' ELSE 'Regular - Desk' END ELSE 'Sweep' END tradetypedesc, COUNT (*) OVER () AS cnt, ROW_NUMBER () OVER (ORDER BY tradetime DESC) rnum FROM (SELECT dollaramount, case transtype when '85' then -1*coalesce(dollaramount, 0) when '95' then -1*coalesce(dollaramount, 0) else coalesce (dollaramount, 0) end dollaramountsort, interestrate, trademode, masterrate, salespersonmarkup, tradermarkup, firmmarkup, DURATION, VERSION, offeryield, offerprice, offerdiscount, tenor, tenorcode, transdate, transdate tradetime, settlementdate, maturitydate, modifydate, tradestatus, CASE WHEN a.parentprodid = '1700' AND a.tradetype != 'I' AND ((SELECT stlmodel FROM fo_productparameter_m p, fo_group_m g WHERE p.groupid = g.groupid AND g.companyid = a.deskid AND g.prodid = a.prodid AND g.currencycode = a.currencycode) NOT IN ('1015', '1016') ) THEN CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack2time IS NOT NULL AND ack5time IS NOT NULL THEN 'Confirmed' ELSE CASE WHEN a.transtype = '10' THEN CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack5time IS NULL AND ack2time IS NULL THEN 'WC' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack5time IS NOT NULL AND ack2time IS NULL THEN 'WN' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NULL AND ack5time IS NULL AND ack2time IS NULL THEN 'WA' ELSE a.tradestatus END END END ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack5time IS NULL AND ack2time IS NULL THEN 'WN' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack5time IS NOT NULL AND ack2time IS NULL THEN 'WC' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NULL AND ack5time IS NULL AND ack2time IS NULL THEN 'WA' ELSE a.tradestatus END END END END END ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL AND ack2time IS NOT NULL THEN 'Confirmed' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NOT NULL THEN 'WC' ELSE CASE WHEN a.tradestatus = 'A' AND ack1time IS NULL AND ack2time IS NULL THEN 'WA' ELSE CASE WHEN a.tradestatus = 'A' AND ack2time IS NOT NULL THEN 'Confirmed' ELSE a.tradestatus END END END END END ticketstatus, statuss, transtype, statust, eccompanyid, transid, prodid, clientloginname, salespersonid, salespersonname, salespersonphone, paymentinstructions, settlementinstructions, acctnbr, currencycode, a.createdby, modifyby, acctname, tradereason, settlementacctnbr, matureacctnbr, parentprodid, fn_get_lang (?, ?, parentprodid ) proddesc, TIMEZONE, rollovertransid, revenue, profit, interestamount, pandi, pandi profitandinterest, parenttransid, misc1, unitid, ddafrom, ddato,settlementacctnbr, companyname, investmentaccount, newtransid, vldttransid, misc2, misc3, salescredit, portfolio, deskid, branchid, refacctnbr, bookedby, username, acceptedby, backoffdealnbr, rejectreason, issuerid, fn_get_lang (?, ?, prodid) issuername, cdtypeid, cdtd, dealtype, prodtype, dealmode, messageid, cfextid, fundacct, callfaxselfserve, authorizedcallers, fundnbr, escrowacctnbr, webreference, accruedinterest, daysover, beginbal, wrate, endbal, baserate, isemt, emtmode, investmode, ddatonbr, ddafromnbr, ack1time, ack2time, approvedby, autorollover, pledged, taximplemented, ltax, ftax, tradetype, pledgecontract, pledgedate, rollovertypeid, durationto, approvedtime, runid, ddabalance, ddabalancetime, csai, ppno, maturitystatus, a.itc, payoutdda, beginshares, shares, endshares, nav, navtype, mmftrmode, navpending, sharepending, amtpending, redeemfee, mncf, mncr, trig, orar, oint, ospm, otrm, aint, iapproval, etermpen, mmtdtransid, isnegflag, ruleid, iexc FROM fo_trading_t a
sql.getSweepsTradeDataForClientForCompany = select  tradetime,(select distinct descr from fo_sp_rules_m m where  m.ruleid = v.ruleid ) rulename,(select distinct loginname from fo_member_m m where m.loginid = v.createdby ) username,(select distinct refacctnbr from fo_accountmaster_m p where p.acctnbr = v.acctnbr) as refacctnbr,(select distinct acctname from fo_accountmaster_m p where p.acctnbr = v.acctnbr) as acctname,acceptedby,modifyby as changedBy,modifydate,approvedby,rejectreason,approvedtime,tradetypedesc, companyname, webreference, settlementacctnbr,isin,prodcode, fundprovider, ISSUERNAME, PARENTPRODID, navtype, tradeType,transtype,interestRate,baserate,offeryield, shares, deskid, branchid,(select companyname from fo_company_m m where branchid = m.companyid ) branchname,nav,acctname,cfextId,ddafrom,ddato, deskgroupid, DOLLARAMOUNT, CURRENCYCODE, mmftrmode,TRANSID, iapproval, TICKETSTATUS,tradestatus, transdate, SETTLEMENTDATE,( select count(*)from fo_trade_costs_fees_m tf	where tf.transid = v.transid) tradecostsfeesCnt ,  backOffDealNbr, PRODDESC ,DATEDIFF, whattoget,cnt,rnum from(select b.*,(select target	from fo_ml_item_d where itemid = '10000001' and locale = coalesce(trim('en_US'), 'en_US') and source = prodid ) issuername, date_part('day', transdate - settlementdate)::bigint datediff, count(*) over() as cnt, row_number () over (	 order by tradeTime desc ) rnum	from (select	phone1,	(select fundcode from	fo_mmf_fund_m p	where p.fundnbr = a.prodid) isin,(select prodcode from fo_product_m p where p.prodid = a.prodid) prodcode, coalesce ((select	companyname from fo_company_m	where companyid in (select providerid																			     					from																					     						fo_mmf_fund_m p																		     					where																					     						p.fundnbr = a.prodid)																     					and companycatid = '600'),																     				'N/A') fundprovider,																		     				a.*,																						     				case																						     					when tradetype in ('R',																	     					'B',																					     					'F',																					     					'D',																					     					'I') then																				     					case																					     						when membercatid = '4' then 'Regular - Self Service'								     						else 'Regular - Desk'																     					end																						     					else 'Sweep'																			     				end tradetypedesc,																			     				case																						     					when a.parentprodid in ('1700','1001')														     					and a.tradetype != 'I'																	     					and ((																					     					select																					     						stlmodel																			     					from																					     						fo_productparameter_m p,															     						fo_group_m g																		     					where																					     						p.groupid = g.groupid																     						and g.companyid = a.deskid															     						and g.prodid = a.prodid																     						and g.currencycode = a.currencycode) not in ('1001',								     					'1015',																					     					'1016',																					     					'1020')) then																			     					case																					     						when a.tradestatus = 'A'															     						and ack1time is not null															     						and ack2time is not null															     						and ack5time is not null then 'Confirmed'											     						else																				     						case																				     							when a.transtype = '10' then													     							case																			     								when a.tradestatus = 'A'													     								and ack1time is not null													     								and ack5time is null														     								and ack2time is null then 'WC'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack1time is not null												     									and ack5time is not null												     									and ack2time is null then 'WN'											     									else																	     									case																	     										when a.tradestatus = 'A'											     										and ack1time is null												     										and ack5time is null												     										and ack2time is null then 'WA'										     										else a.tradestatus													     									end																		     								end																			     							end																				     							else																			     							case																			     								when a.tradestatus = 'A'													     								and ack1time is not null													     								and ack5time is null														     								and ack2time is null then 'WN'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack1time is not null												     									and ack5time is not null												     									and ack2time is null then 'WC'											     									else																	     									case																	     										when a.tradestatus = 'A'											     										and ack1time is null												     										and ack5time is null												     										and ack2time is null then 'WA'										     										else a.tradestatus													     									end																		     								end																			     							end																				     						end																					     					end																						     					else																					     					case																					     						when a.tradestatus = 'A'															     						and ack1time is not null															     						and ack2time is not null then 'Confirmed'											     						else																				     						case																				     							when a.tradestatus = 'A'														     							and ack1time is not null then 'WC'												     							else																			     							case																			     								when a.tradestatus = 'A'													     								and ack1time is null														     								and ack2time is null then 'WA'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack2time is not null then 'Confirmed'								     									else a.tradestatus														     								end																			     							end																				     						end																					     					end																						     				end ticketStatus,																			     				(																							     				select																						     					groupId																					     				from																						     					fo_group_m																				     				where																						     					companyid = a.deskid																	     					and prodid = a.prodid																	     					and currencycode = a.currencycode														     					and status = 'Y' ) deskgroupid															     			from																							     				(																							     				select																						     					ruleid,acceptedby,modifyby,modifydate,approvedby,rejectreason,approvedtime,dollaramount,																			     					interestrate,baserate,offeryield,																			     					transdate,																				     					transDate tradeTime,																	     					settlementdate,maturitydate,tradestatus,transtype,eccompanyid,transid,cfextId,ddafrom,ddato,																				     					prodid,																					     					paymentinstructions,																	     					acctnbr,																				     					currencycode,acctname,parentprodid,																			     					interestamount,																			     					pandi,																					     					companyname,																			     					deskid,																					     					branchid,																				     					refacctnbr,																				     					username,																				     					prodtype,																				     					escrowacctnbr,																			     					webreference,settlementacctnbr,																			     					ack1time,																				     					ack2time,																				     					shares,																					     					nav,																					     					navtype,																				     					iapproval,																				     					createdby,																				     					tradetype,																				     					ack5time ,																				     					mmftrmode,																				     					proddesc ,																				     					'todays' whattoget ,																	     					case																					     						when ack1time is not null															     						and ack2time is not null															     						and ack5time is not null															     						and tradestatus = 'A' then backoffdealnbr											     						else ''																				     					end backoffdealnbr																		     				from																						     					fo_trading_t																				     			union all																						     				select																						     					ruleid,acceptedby,modifyby,modifydate,approvedby,rejectreason,approvedtime,dollaramount,																			     					interestrate,baserate,	offeryield,																		     					transdate,																				     					transDate tradeTime,																	     					settlementdate,																			     					maturitydate,																			     					tradestatus,																			     					transtype,cfextId,ddafrom,ddato,																				     					eccompanyid,																			     					transid,																				     					prodid,																					     					paymentinstructions,																	     					acctnbr,																				     					currencycode,																			     					acctname,																				     																						     					parentprodid,																			     					interestamount,																			     					pandi,																					     					companyname,																			     					deskid,																					     					branchid,																				     					refacctnbr,																				     					username,																				     					prodtype,																				     					escrowacctnbr,																			     					webreference,	settlementacctnbr,																		     					ack1time,																				     					ack2time,																				     					shares,																					     					nav,																					     					navtype,																				     					iapproval,																				     					createdby,																				     					tradetype,																				     					ack5time,																				     					mmftrmode,																				     					proddesc ,																				     					'history' whattoget ,																	     					case																					     						when ack1time is not null															     						and ack2time is not null															     						and ack5time is not null															     						and tradestatus = 'A' then backoffdealnbr											     						else ''																				     					end backoffdealnbr																		     				from																						     					fo_simult_t ) a																		     			left outer join fo_member_m m on																     				(m.loginid = a.createdby)																	    WHERE  ( transdate :: DATE BETWEEN															        ?::DATE AND ?::DATE)																			  				and eccompanyid in ( with recursive t as (													     					select																					     						companyid,																			     						cparentid,																			     						companycatid																		     					from																					     						fo_company_m cm																		     					where																					     						companyid = ?																     			union all																						     				select																						     					t_2.companyid,																			     					t_2.cparentid,																			     					t_2.companycatid																		     				from																						     					fo_company_m as t_2,																	     					t																						    				where																						     					t.companyid = t_2.cparentid )															     				select																						     					companyid																				     				from																						     					t																						     				where																						     					companycatid = '500')																	     				and parentprodid = '1700'																	     				and tradestatus in ('A',																	     				'C',																						     				'P',																						     				'D',																						     				'R',																						     				'M',																						     				'E',																						     				'O',																						     				'W',																						     				'F',																						     				'K')																						     				and tradestatus = (																			     				case																						     					when tradetype = 'B' then (																     					case																					     						when tradestatus = 'D' then tradestatus												     						when tradestatus = 'A' then tradestatus												     						when tradestatus = 'W' then tradestatus												     					end )																					     					else tradestatus																		     				end )																						     				and tradetype = (																			     				case																						     					'ALL'																					     					when 'ALL' then tradetype																     					else 'ALL'																				     				end )																				and coalesce(m.membercatid, '0') in ('0','2','3','4') 
sql.getSweepsTradeDataForClientForBranch = select  tradetypedesc, companyname, webreference,settlementacctnbr, isin,prodcode, fundprovider, ISSUERNAME, PARENTPRODID, navtype, tradeType,transtype,interestRate,cfextId,ddafrom,ddato, shares,baserate,offeryield, deskid, branchid,(select companyname from fo_company_m m where branchid = m.companyid ) branchname,nav,acctname,cfextId, deskgroupid, DOLLARAMOUNT, CURRENCYCODE, mmftrmode,			     		TRANSID, iapproval, TICKETSTATUS,																	     		tradestatus, transdate, SETTLEMENTDATE,																     	  	( select count(*)																					     		from fo_trade_costs_fees_m tf																		     		where tf.transid = v.transid) tradecostsfeesCnt ,  backOffDealNbr, PRODDESC ,DATEDIFF, whattoget	     		,cnt,rnum																							     	from																									     		(																									     		select																								     			b.*,																							     			(																								     			select																							     				target																						     			from																							     				fo_ml_item_d																				     			where																							     				itemid = '10000001'																			     				and locale = coalesce(trim('en_US'), 'en_US')												     				and source = prodid ) issuername,															     			date_part('day', transdate - settlementdate)::bigint datediff,									     			count(*) over() as cnt,																			     			row_number () over (																			     		order by																							     			tradeTime desc ) rnum																			     		from																								     			(																								     			select																							     				phone1,																						     				(																							     				select																						     					fundcode																				     				from																						     					fo_mmf_fund_m p																			     				where																						     					p.fundnbr = a.prodid) isin,	(select prodcode from fo_product_m p where p.prodid = a.prodid) prodcode,															     				coalesce ((																					     				select																						     					companyname																				     				from																						     					fo_company_m																			     				where																						     					companyid in (																			     					select																					     						providerid																			     					from																					     						fo_mmf_fund_m p																		     					where																					     						p.fundnbr = a.prodid)																     					and companycatid = '600'),																     				'N/A') fundprovider,																		     				a.*,																						     				case																						     					when tradetype in ('R',																	     					'B',																					     					'F',																					     					'D',																					     					'I') then																				     					case																					     						when membercatid = '4' then 'Regular - Self Service'								     						else 'Regular - Desk'																     					end																						     					else 'Sweep'																			     				end tradetypedesc,																			     				case																						     					when a.parentprodid in ('1700','1001')															     					and a.tradetype != 'I'																	     					and ((																					     					select																					     						stlmodel																			     					from																					     						fo_productparameter_m p,															     						fo_group_m g																		     					where																					     						p.groupid = g.groupid																     						and g.companyid = a.deskid															     						and g.prodid = a.prodid																     						and g.currencycode = a.currencycode) not in ('1001',								     					'1015',																					     					'1016',																					     					'1020')) then																			     					case																					     						when a.tradestatus = 'A'															     						and ack1time is not null															     						and ack2time is not null															     						and ack5time is not null then 'Confirmed'											     						else																				     						case																				     							when a.transtype = '10' then													     							case																			     								when a.tradestatus = 'A'													     								and ack1time is not null													     								and ack5time is null														     								and ack2time is null then 'WC'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack1time is not null												     									and ack5time is not null												     									and ack2time is null then 'WN'											     									else																	     									case																	     										when a.tradestatus = 'A'											     										and ack1time is null												     										and ack5time is null												     										and ack2time is null then 'WA'										     										else a.tradestatus													     									end																		     								end																			     							end																				     							else																			     							case																			     								when a.tradestatus = 'A'													     								and ack1time is not null													     								and ack5time is null														     								and ack2time is null then 'WN'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack1time is not null												     									and ack5time is not null												     									and ack2time is null then 'WC'											     									else																	     									case																	     										when a.tradestatus = 'A'											     										and ack1time is null												     										and ack5time is null												     										and ack2time is null then 'WA'										     										else a.tradestatus													     									end																		     								end																			     							end																				     						end																					     					end																						     					else																					     					case																					     						when a.tradestatus = 'A'															     						and ack1time is not null															     						and ack2time is not null then 'Confirmed'											     						else																				     						case																				     							when a.tradestatus = 'A'														     							and ack1time is not null then 'WC'												     							else																			     							case																			     								when a.tradestatus = 'A'													     								and ack1time is null														     								and ack2time is null then 'WA'												     								else																		     								case																		     									when a.tradestatus = 'A'												     									and ack2time is not null then 'Confirmed'								     									else a.tradestatus														     								end																			     							end																				     						end																					     					end																						     				end ticketStatus,																			     				(																							     				select																						     					groupId																					     				from																						     					fo_group_m																				     				where																						     					companyid = a.deskid																	     					and prodid = a.prodid																	     					and currencycode = a.currencycode														     					and status = 'Y' ) deskgroupid															     			from																							     				(																							     				select																						     					dollaramount,																			     					interestrate,	baserate,offeryield,																		     					transdate,																				     					transDate tradeTime,																	     					settlementdate,																			     					maturitydate,																			     					tradestatus,																			     					transtype,cfextId,ddafrom,ddato,																				     					eccompanyid,																			     					transid,																				     					prodid,																					     					paymentinstructions,																	     					acctnbr,																				     					currencycode,																			     					acctname,																				     																							     					parentprodid,																			     					interestamount,																			     					pandi,																					     					companyname,																			     					deskid,																					     					branchid,																				     					refacctnbr,																				     					username,																				     					prodtype,																				     					escrowacctnbr,																			     					webreference,settlementacctnbr,																			     					ack1time,																				     					ack2time,																				     					shares,																					     					nav,																					     					navtype,																				     					iapproval,																				     					createdby,																				     					tradetype,																				     					ack5time ,																				     					mmftrmode,																				     					proddesc ,																				     					'history' whattoget ,																	     					case																					     						when ack1time is not null															     						and ack2time is not null															     						and ack5time is not null															     						and tradestatus = 'A' then backoffdealnbr											     						else ''																				     					end backoffdealnbr																		     				from																						     					fo_simult_t																				     			union all																						     				select																						     					dollaramount,																			     					interestrate,	baserate,offeryield,																		     					transdate,																				     					transDate tradeTime,																	     					settlementdate,																			     					maturitydate,																			     					tradestatus,																			     					transtype,cfextId,ddafrom,ddato,																				     					eccompanyid,																			     					transid,																				     					prodid,																					     					paymentinstructions,																	     					acctnbr,																				     					currencycode,																			     					acctname,																				     																							     					parentprodid,																			     					interestamount,																			     					pandi,																					     					companyname,																			     					deskid,																					     					branchid,																				     					refacctnbr,																				     					username,																				     					prodtype,																				     					escrowacctnbr,																			     					webreference,settlementacctnbr,																			     					ack1time,																				     					ack2time,																				     					shares,																					     					nav,																					     					navtype,																				     					iapproval,																				     					createdby,																				     					tradetype,																				     					ack5time,																				     					mmftrmode,																				     					proddesc ,																				     					'todays' whattoget ,																	     					case																					     						when ack1time is not null															     						and ack2time is not null															     						and ack5time is not null															     						and tradestatus = 'A' then backoffdealnbr											     						else ''																				     					end backoffdealnbr																		     				from																						     					fo_trading_t ) a																		     			left outer join fo_member_m m on																     				(m.loginid = a.createdby)																	    WHERE  ( transdate :: DATE BETWEEN															        ?::DATE AND ?::DATE)																			  				and eccompanyid in ( with recursive t as (													     					select																					     						companyid,																			     						cparentid,																			     						companycatid																		     					from																					     						fo_company_m cm																		     					where																					     						companyid in (select companyid from fo_accountmaster_m where legalentity=? and status='Y')																     			union all																						     				select																						     					t_2.companyid,																			     					t_2.cparentid,																			     					t_2.companycatid																		     				from																						     					fo_company_m as t_2,																	     					t																						    				where																						     					t.companyid = t_2.cparentid )															     				select																						     					companyid																				     				from																						     					t																						     				where																						     					companycatid = '500')																	     				and parentprodid in ('1700','1001')																	     				and tradestatus in ('A',																	     				'C',																						     				'P',																						     				'D',																						     				'R',																						     				'M',																						     				'E',																						     				'O',																						     				'W',																						     				'F',																						     				'K')																						     				and tradestatus = (																			     				case																						     					when tradetype = 'B' then (																     					case																					     						when tradestatus = 'D' then tradestatus												     						when tradestatus = 'A' then tradestatus												     						when tradestatus = 'W' then tradestatus												     					end )																					     					else tradestatus																		     				end )																						     				and tradetype = (																			     				case																						     					'ALL'																					     					when 'ALL' then tradetype																     					else 'ALL'																				     				end )																				and coalesce(m.membercatid, '0') in ('0','2','3','4') 
sql.getSweepsTradeDataForClientForAll = select tradetime,(select distinct descr from fo_sp_rules_m m where  m.ruleid = v.ruleid ) rulename,(select distinct loginname from fo_member_m m where m.loginid = v.createdby ) username,(select distinct refacctnbr from fo_accountmaster_m p where p.acctnbr = v.acctnbr) as refacctnbr,(select distinct acctname from fo_accountmaster_m p where p.acctnbr = v.acctnbr) as acctname,acceptedby,modifyby as changedBy,modifydate,approvedby,rejectreason,approvedtime,tradetypedesc, companyname, webreference,settlementacctnbr, isin,prodcode, fundprovider, ISSUERNAME, PARENTPRODID, navtype, tradeType, transtype,cfextId,ddafrom,ddato,interestRate, shares, deskid,baserate,offeryield, branchid,(select companyname from fo_company_m m where branchid = m.companyid ) branchname,nav,acctname,cfextId, deskgroupid,	DOLLARAMOUNT, CURRENCYCODE, mmftrmode, TRANSID, iapproval, TICKETSTATUS, tradestatus, transdate, SETTLEMENTDATE, ( select count(*) from	fo_trade_costs_fees_m tf where tf.transid = v.transid) tradecostsfeesCnt , backOffDealNbr, PRODDESC , DATEDIFF, whattoget , cnt, rnum from ( select	b.*, ( select target from fo_ml_item_d where itemid = '10000001' and locale = coalesce(trim('en_US'), 'en_US') and source = prodid ) issuername,	date_part('day', transdate - settlementdate)::bigint datediff, count(*) over() as cnt, row_number () over ( order by tradeTime desc ) rnum from (	select phone1, ( select fundcode from fo_mmf_fund_m p where p.fundnbr = a.prodid) isin,(select prodcode from fo_product_m p where p.prodid = a.prodid) prodcode, coalesce (( select companyname from fo_company_m where	companyid in ( select providerid from fo_mmf_fund_m p where p.fundnbr = a.prodid) and companycatid = '600'), 'N/A') fundprovider, a.*, case when	tradetype in ('R', 'B', 'F', 'D', 'I') then case when membercatid = '4' then 'Regular - Self Service' else 'Regular - Desk' end else 'Sweep' end	tradetypedesc, case when a.parentprodid in ('1700','1001') and a.tradetype != 'I' and (( select stlmodel from fo_productparameter_m p, fo_group_m g where	p.groupid = g.groupid and g.companyid = a.deskid and g.prodid = a.prodid and g.currencycode = a.currencycode) not in ('1001', '1015', '1016',	'1020')) then case when a.tradestatus = 'A' and ack1time is not null and ack2time is not null and ack5time is not null then 'Confirmed' else case	when a.transtype = '10' then case when a.tradestatus = 'A' and ack1time is not null and ack5time is null and ack2time is null then 'WC' else case	when a.tradestatus = 'A' and ack1time is not null and ack5time is not null and ack2time is null then 'WN' else case when a.tradestatus = 'A' and	ack1time is null and ack5time is null and ack2time is null then 'WA' else a.tradestatus end end end else case when a.tradestatus = 'A' and ack1time	is not null and ack5time is null and ack2time is null then 'WN' else case when a.tradestatus = 'A' and ack1time is not null and ack5time is not null	and ack2time is null then 'WC' else case when a.tradestatus = 'A' and ack1time is null and ack5time is null and ack2time is null then 'WA' else	a.tradestatus end end end end end else case when a.tradestatus = 'A' and ack1time is not null and ack2time is not null then 'Confirmed' else case	when a.tradestatus = 'A' and ack1time is not null then 'WC' else case when a.tradestatus = 'A' and ack1time is null and ack2time is null then 'WA'	else case when a.tradestatus = 'A' and ack2time is not null then 'Confirmed' else a.tradestatus end end end end end ticketStatus, ( select groupId	from fo_group_m where companyid = a.deskid and prodid = a.prodid and currencycode = a.currencycode and status = 'Y' ) deskgroupid from ( select	ruleid,acceptedby,modifyby,modifydate,approvedby,rejectreason,approvedtime,dollaramount, interestrate,baserate,offeryield, transdate, transDate tradeTime, settlementdate, maturitydate, tradestatus, transtype,cfextId,ddafrom,ddato, eccompanyid, transid, prodid,	paymentinstructions, acctnbr, currencycode, acctname,  parentprodid, interestamount, pandi, companyname, deskid, branchid,	refacctnbr, username, prodtype, escrowacctnbr, webreference,settlementacctnbr, ack1time, ack2time, shares, nav, navtype, iapproval, createdby, tradetype, ack5time ,	mmftrmode, proddesc , 'history' whattoget , case when ack1time is not null and ack2time is not null and ack5time is not null and tradestatus = 'A'	then backoffdealnbr else '' end backoffdealnbr from fo_simult_t union all select ruleid,acceptedby,modifyby,modifydate,approvedby,rejectreason,approvedtime,dollaramount, interestrate,baserate,offeryield, transdate, transDate tradeTime,	settlementdate, maturitydate, tradestatus, transtype, cfextId,ddafrom,ddato,eccompanyid, transid, prodid, paymentinstructions, acctnbr, currencycode, acctname,	 parentprodid, interestamount, pandi, companyname, deskid, branchid, refacctnbr, username, prodtype, escrowacctnbr, webreference,settlementacctnbr,	ack1time, ack2time, shares, nav, navtype, iapproval, createdby, tradetype, ack5time, mmftrmode, proddesc , 'todays' whattoget , case when ack1time	is not null and ack2time is not null and ack5time is not null and tradestatus = 'A' then backoffdealnbr else '' end backoffdealnbr from fo_trading_t	) a left outer join fo_member_m m on (m.loginid = a.createdby) where ( transdate :: date between ?::date and ?::date) and eccompanyid in ( with	recursive t as ( select companyid, cparentid, companycatid from fo_company_m cm where companyid in ( select a.companyid from fo_company_m a,	fo_accountmaster_m b where a.companyid = b.companyid and b.legalentity in ( select companyid from fo_up_company_m where loginId =? and status =	'Y')) union all select t_2.companyid, t_2.cparentid, t_2.companycatid from fo_company_m as t_2, t where t.companyid = t_2.cparentid ) select	companyid from t where companycatid = '500') and parentprodid in('1700','1001') and tradestatus in ('A', 'C', 'P', 'D', 'R', 'M', 'E', 'O', 'W', 'F', 'K')  and tradetype = ( case 'ALL' when 'ALL' then tradetype else 'ALL' end ) and	coalesce(m.membercatid, '0') in ('0', '2', '3', '4') 
sql.getSweepsAssocCcyForUserProduct = SELECT DISTINCT c.currencycode, c.currencyname currencyname FROM fo_currency_m c, fo_group_m g WHERE g.companyid= CASE ? WHEN ? THEN g.companyid ELSE ? END AND g.prodid = CASE ? WHEN ? THEN g.prodid ELSE ? END AND g.currencycode = c.currencycode AND g.status = ? AND c.status = ?
sql.sweepDetails=select SWEEPID , MONITORED_ACCTNO , MONITORED_CCY , MONITORED_PRE_SWEEP , MONITORED_POST_SWEEP , MONITORED_RULE, TARGET_ACCTNO, TARGET_CCY, TARGET_PRE_SWEEP, TARGET_POST_SWEEP, TARGET_RULE, SWEEP_AMOUNT, VALUEDATE, STATUS,productname from FO_SWEEP_INTRADAY_M
sql.eodSweepTransactionReport=select SWEEPID , MONITORED_ACCTNO , MONITORED_CCY , MONITORED_PRE_SWEEP , MONITORED_POST_SWEEP , MONITORED_RULE, TARGET_ACCTNO, TARGET_CCY, TARGET_PRE_SWEEP, TARGET_POST_SWEEP, TARGET_RULE, SWEEP_AMOUNT, VALUEDATE, STATUS,productname from FO_SWEEP_EOD_M
sql.setRuleDetailsProductInsert = INSERT INTO fo_sp_ruleproducts_d (ruleid , deskgroupid, groupid, ddaacct, dpool, amtpcnt, value, sortorder, status, createddate, maxamt, createdby,mcprocessid,mmfacctnbr,fundacctnbr,refacctnbr) VALUES (?,?,?,?,?,?::smallint,?::numeric,?::smallint,?,?,?::numeric,? ,?,?,?,?)
sql.setRuleDetailsInsert = INSERT INTO fo_sp_rules_m ( ruleid, companyid, descr, rulemode , ddatype , targetbal, targetccy , incramt , trigamt , trigccy , baltypeid , approval , transtypeid , status, nature, invacct, createddate, createdby,mcprocessid) VALUES (?,?,?,?,?,?::numeric,?,?::numeric,?::numeric,?,?,?,?,?,?,?,?,?,?)
sql.delRuleDetailsUpdate =UPDATE fo_sp_rules_m SET mcprocessid=?, modifieddate=?,  modifiedby=? WHERE 	ruleid = ? 
sql.delRuleDetailsSelectOne = SELECT DISTINCT acct2.acctnbr, b.groupid, a.invacct, a.companyid, acct2.status, b.ddaacct FROM fo_accountmaster_m acct1, fo_accountmaster_m acct2, fo_acct_association_m ac1, fo_acct_association_m ac2, fo_sp_rules_m a, fo_sp_ruleproducts_d b WHERE a.ruleid=? AND a.ruleid=b.ruleid AND ac1.fromacctnbr=acct1.acctnbr AND ac1.groupid =ac2.groupid AND ac1.groupid =b.groupid AND ac2.fromacctnbr =acct2.acctnbr AND ac1.toacctnbr =ac2.fromacctnbr AND ac1.fromacctnbr =a.invacct AND ac2.toacctnbr =b.ddaacct AND acct1.status='Y' AND acct2.status='Y' AND ac1.status='Y' AND ac2.status='Y' AND b.status='Y' AND acct1.acctnatureflag='100' AND acct2.acctnatureflag='103'
sql.setSweepRunStatusUpdate = UPDATE fo_sp_run_h SET	availablebal=?::numeric, availabletype=? WHERE  runid  = ? AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.setSweepRunStatusSelect = SELECT COUNT(*) cnt FROM fo_sp_productrunfailure_d WHERE  runid = ? AND status = 'F' AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.setRuleProductFailureInsert = INSERT INTO fo_sp_productrunfailure_d (runid, ruleid, planid, groupid, companyid, acctnbr, ddaacctnbr, value, amtpcnt, transtypeid, incramt, maxamt, failcnt, rulemode, targetbal, targetccy, trigamt, trigccy, baltypeid, createdby, execdate, exectime, createddate, status,reason,swpacctnbr,tradeamount,severity) VALUES (?,?,?,?,?,?,?,?::numeric,?::smallint,?,?::numeric,?::numeric,1::smallint,?,?::numeric,?,?::numeric,?,?,?,?,?,?,?,?,?,?,?::smallint)
sql.setRuleProductFailureUpdate = UPDATE fo_sp_run_d SET    status = ?, availablebal=?::numeric, availabletype=? WHERE  runid      = ?
sql.setRuleProductFailureUpdateTwo = UPDATE fo_sp_run_h SET	availablebal=?::numeric, availabletype=? WHERE  runid  = ? AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))	 
sql.setRuleProductFailureUpdateThree = UPDATE fo_sp_productrunfailure_d SET status = 'F', failcnt=failcnt+1, reason= ?, createddate=?, modifieddate=?, tradeamount=?, ddaacctnbr=?, severity= ?::smallint WHERE runid = ? AND ruleid =? AND planid =? AND groupid=? AND companyid=? AND acctnbr=? AND rulemode=? AND execdate=? AND exectime=? AND status= 'P'
sql.inactivatePlansSQLUpdate = UPDATE fo_sp_ruleproducts_d SET status ='N',modifiedby='SYSTEM', modifieddate=? WHERE ruleid IN ( SELECT ruleid FROM fo_sp_ruleaccount_d WHERE planid IN ( SELECT planid FROM fo_sp_planschedules_m WHERE coalesce(todate,TRUNC(current_date)+365) < TO_DATE(?,?) ) AND companyid IN ( SELECT DISTINCT c.companyid FROM fo_company_m c, fo_company_m d, fo_accountmaster_m a WHERE c.companyid = a.companyid AND c.companycatid='500' AND c.status='Y' AND d.companyid = a.legalentity AND d.parentid = ? AND a.status='Y' AND a.accttypeid ='I') AND status ='Y' )
sql.inactivatePlansSQLUpdateTwo = UPDATE fo_sp_rules_m SET status ='N',modifiedby='SYSTEM', modifieddate=? WHERE ruleid IN ( SELECT ruleid FROM fo_sp_ruleaccount_d WHERE planid IN ( SELECT planid FROM fo_sp_planschedules_m WHERE coalesce(todate,TRUNC(current_date)+365) < TO_DATE(?,?) ) AND companyid IN ( SELECT DISTINCT c.companyid FROM fo_company_m c, fo_company_m d, fo_accountmaster_m a WHERE c.companyid = a.companyid AND c.companycatid='500' AND c.status='Y' AND d.companyid = a.legalentity AND d.parentid = ? AND a.status='Y' AND a.accttypeid ='I') AND status ='Y' )
sql.inactivatePlansSQLUpdateThree = UPDATE fo_sp_ruleaccount_d SET status ='N',modifiedby='SYSTEM', modifieddate=? WHERE planid IN ( SELECT planid FROM fo_sp_planschedules_m WHERE coalesce(todate,TRUNC(current_date)+365) < TO_DATE(?,?)) AND companyid IN ( SELECT DISTINCT c.companyid FROM fo_company_m c, fo_company_m d, fo_accountmaster_m a WHERE c.companyid = a.companyid AND c.companycatid='500' AND c.status='Y' AND d.companyid = a.legalentity AND d.parentid = ? AND a.status='Y' AND a.accttypeid ='I') AND status ='Y'
sql.getOtherProductsScheduled = SELECT a.companyid, a.ddaacctnbr, coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.ddaacctnbr),'') ddaacctname, b.dpool, a.acctnbr, coalesce((SELECT refacctnbr || '-' || acctname FROM fo_accountmaster_m WHERE acctnbr = a.acctnbr),'') acctname, b.value, b.groupid, b.deskgroupid, b.amtpcnt, b.sortorder, a.ruleid, c.descr, coalesce(b.maxAmt,0) maxAmt, a.planid, c.transtypeid transtype, coalesce(c.incramt,0) incramt, c.rulemode, c.ddatype, coalesce(c.targetbal,0) targetbal, c.targetccy, coalesce(c.trigamt,0) trigamt, c.trigccy, c.baltypeid, a.runid, c.createdby, c.INVACCT, b.DDAACCT, g.sweepcutoff, a.execdate, a.exectime FROM fo_sp_run_d a, fo_sp_ruleproducts_d b, fo_sp_rules_m c, fo_sp_ruleaccount_d d, fo_productparameter_m g WHERE a.ruleid=b.ruleid AND b.ruleid=c.ruleid AND a.deskgroupid = g.GROUPID AND a.deskgroupid =b.DESKGROUPID AND a.companyid=c.companyid AND d.companyid=a.companyid AND a.planid=d.planid AND a.acctnbr=d.acctnbr AND b.status = 'Y' AND d.status = 'Y' AND a.status = 'Y' AND a.approval='A' AND a.transtypeid = '10' AND c.ruleid = ? AND b.DDAACCT = ? AND TRUNC(a.execdate) = TRUNC(to_date(?,?))
sql.getRunIdsForMidNightSelect = SELECT a.runid, a.status, a.execdate, a.aedt, a.exectime, c.descr, c.approval, a.deskgroupid, c.rulemode, c.ddatype, d.ddaacct, a.transtypeid FROM fo_sp_run_d a, fo_group_m b, fo_sp_rules_m c, fo_sp_ruleproducts_d d WHERE b.groupid = a.deskgroupid AND b.status = 'Y' AND a.ruleid = c.ruleid AND c.ruleid = d.ruleid AND a.deskgroupid = d.deskgroupid AND d.status = 'Y' AND b.companyid = ? AND c.approval = 'A'
sql.getRunIdsForMidNightSelectTwo = SELECT DISTINCT a.runid,a.planid, a.ruleid, a.execdate, a.aedt, a.exectime, c.descr, c.approval, a.deskgroupid, c.rulemode, c.ddatype, d.ddaacct, a.transtypeid ,p.executiontype,p.executiontime	FROM fo_sp_run_d a, fo_group_m b, fo_sp_rules_m c, fo_sp_ruleproducts_d d , fo_sp_planschedules_m  p WHERE b.groupid = a.deskgroupid AND b.status = 'Y' AND a.ruleid = c.ruleid AND c.ruleid = d.ruleid AND a.deskgroupid = d.deskgroupid and a.planid=p.planid  and p.status ='Y' AND d.status = 'Y' AND TRUNC(a.execdate) = TRUNC(to_date(?,?)) AND b.companyid = ? AND  ((c.approval = 'A' AND	a.status in('Y','P'))	or   (c.approval ='M' AND	a.status in('S','Y','P') and p.executiontype = 'I') )
sql.processEODDetailsInsert = INSERT INTO fo_sweep_eod_m (sweepid, ruleid, rulename, companyid, monitored_acctno, monitored_ccy, monitored_pre_sweep, monitored_post_sweep, monitored_rule, target_acctno, target_ccy, target_pre_sweep, target_post_sweep, target_rule, sweep_amount, valuedate, status, type_intraday, total_sweep_amount, createddate, createdby, modifieddate, modifiedby,productname) select rule_m.ruleid sweepid, rule_m.ruleid ruleid, rule_m.descr rulename, rule_m.companyid, trad_t.escrowacctnbr monitored_acctno, trad_t.currencycode monitored_ccy, coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) monitored_pre_sweep, (coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) - coalesce(trad_t.dollaramount,0)) monitored_post_sweep, rule_m.descr monitored_rule, rule_m.invacct target_acctno, trad_t.currencycode target_ccy, coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) target_pre_sweep, (coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) - coalesce(trad_t.dollaramount,0)) target_post_sweep, rule_m.descr target_rule, rule_m.trigamt, trad_t.transdate valuedate, 'U' status, '' type_intraday, 0 total_sweep_amount, current_date createddate, 'TEST' createdby, null modifieddate, null modifiedby ,(select p.prodname from fo_product_m p where p.prodid=trad_t.prodid) productname from fo_sp_rules_m rule_m, fo_sweep_rule_trans_m rule_trans_m, fo_trading_t trad_t where rule_m.ruleid = rule_trans_m.ruleid and rule_trans_m.transid = trad_t.transid and rule_m.ruleid = ? and trad_t.transid =?
sql.processIntradayDetailsInsert = INSERT INTO FO_SWEEP_INTRADAY_M (sweepid, ruleid, rulename, companyid, monitored_acctno, monitored_ccy, monitored_pre_sweep, monitored_post_sweep, monitored_rule, target_acctno, target_ccy, target_pre_sweep, target_post_sweep, target_rule, sweep_amount, valuedate, status, type_intraday, total_sweep_amount, createddate, createdby, modifieddate, modifiedby,productname) select rule_m.ruleid sweepid, rule_m.ruleid ruleid, rule_m.descr rulename, rule_m.companyid, trad_t.escrowacctnbr monitored_acctno, trad_t.currencycode monitored_ccy, coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) monitored_pre_sweep, (coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) - coalesce(trad_t.dollaramount,0)) monitored_post_sweep, rule_m.descr monitored_rule, rule_m.invacct target_acctno, trad_t.currencycode target_ccy, coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) target_pre_sweep, (coalesce((select sum(netbal) from fo_acct_dailybal_m adbal, fo_accountmaster_m fam where adbal.settleacctnbr = fam.acctnbr and fam.refacctnbr = trad_t.settlementacctnbr),0) - coalesce(trad_t.dollaramount,0)) target_post_sweep, rule_m.descr target_rule, rule_m.trigamt, trad_t.transdate valuedate, 'U' status, '' type_intraday, 0 total_sweep_amount, current_date createddate, 'TEST' createdby, null modifieddate, null modifiedby ,(select p.prodname from fo_product_m p where p.prodid=trad_t.prodid) productname from fo_sp_rules_m rule_m, fo_sweep_rule_trans_m rule_trans_m, fo_trading_t trad_t where rule_m.ruleid = rule_trans_m.ruleid and rule_trans_m.transid = trad_t.transid and rule_m.ruleid = ? and trad_t.transid =?
sql.processIntradayEODTradeInfoInsert = INSERT INTO fo_sweep_rule_trans_m (ruleid, transid, executiontype) VALUES(?, ?, ?)
sql.getSweepRunDetailsSelectOne = SELECT * FROM ( SELECT t.*,COUNT(*) OVER() as cnt,ROW_NUMBER () OVER (ORDER BY execdate DESC) rnum FROM ( SELECT a.deskgroupid ades,a.companyid, a.planid, a.ruleid, a.runid, z.ddaacct, a.availablebal, a.availabletype, coalesce ( ( SELECT DISTINCT severity FROM fo_sp_productrunfailure_d f WHERE f.runid = a.runid AND f.ddaacctnbr=z.ddaacct AND f.ruleid=a.ruleid AND f.execdate::DATE = a.execdate::DATE ),'0')severity, CASE WHEN availabletype='D' THEN (SELECT max(lastrefreshed) FROM fo_acct_ddabal_m WHERE acctnbr=z.ddaacct) ELSE CASE WHEN availabletype='S' THEN (SELECT max(lastrefreshed) FROM fo_acct_stalebal_m WHERE acctnbr=z.ddaacct) ELSE CASE WHEN availabletype='M' THEN TO_CHAR(a.modifieddate,'YYYYMMDDHH24miss') END END END lastrefreshed, e.companyid deskid, coalesce ( ( SELECT distinct sum(failcnt) over(partition by runid,ddaacctnbr,ruleid,groupid,execdate::date) FROM fo_sp_productrunfailure_d f WHERE f.runid = a.runid AND f.ddaacctnbr = z.ddaacct AND f.ruleid = z.ruleid AND f.groupid = z.groupid AND f.ruleid = a.ruleid AND f.execdate::DATE = a.execdate::DATE ),'0')failcnt, g.groupid gd, e.groupid ed, a.acctnbr, case when a.status = 'P' then 'Processing' when a.status = 'Y' then 'Active' when a.status = 'S' then 'Success' else 'Failed' end status, (SELECT refacctnbr || '-'|| acctname FROM fo_accountmaster_m WHERE acctnbr=a.acctnbr)account, (SELECT refacctnbr || '-'|| acctname FROM fo_accountmaster_m WHERE acctnbr=z.ddaacct)accountDDA,
sql.getSweepRunDetailsSelectTwo = (SELECT DISTINCT act2.refacctnbr||'-'|| act2.acctname FROM fo_acct_association_m a11, fo_acct_association_m a1, fo_accountmaster_m act1, fo_accountmaster_m act2 WHERE a11.fromacctnbr = act1.acctnbr AND act1.acctnatureflag = '100' AND a11.groupid = a1.groupid AND a11.groupid = z.groupid AND a1.intposttypeid = '100' AND a1.fromacctnbr = act2.acctnbr AND act2.acctnatureflag = '103' AND a11.toacctnbr = a1.fromacctnbr AND a11.fromacctnbr = a.acctnbr AND a1.toacctnbr= z.ddaacct AND a11.status ='Y' AND a1.status = 'Y' AND act1.status = 'Y' and act2.status='Y' limit 1 ) accountFund,
sql.getSweepRunDetailsSelectThree = a.value, case when a.approval = 'A' then 'Auto' else 'Manual' end approval, a.exectime, a.execdate, a.modifieddate, p.prodname, ( case when rulemode = 'R' and a.transtypeid = '20' then g.BEGINTIME else to_char ( (to_timestamp (case when substr ( coalesce (sweepcutoff,endtime),1,2) = '00' then '12'else SUBSTR ( coalesce (sweepcutoff,endtime),1,2) end || SUBSTR ( coalesce (sweepcutoff,endtime),3),'HH24:MI PM')::timestamp - interval '1 min' * a.exectime::int),'HH:MI PM')end ) CUTOFF , b.descr, case b.rulemode when 'R' then a.transtypeid else b.transtypeid end transtypeid,t.description transtype, b.rulemode, b.ddatype, case when b.rulemode = 'R' then 'Round Trip' else 'Normal' end modeDesc, c.planname, a.deskgroupid, case when a.approval = 'A' then 'No' else (CASE WHEN EXECDATE<=TO_DATE(?,?) THEN (CASE WHEN rulemode='N' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(sweepcutoff,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') <= (TO_DATE(?,?)+coalesce(a.exectime::int,30)/1440) THEN 'Yes' ELSE 'No' END ) WHEN rulemode='R' AND a.transtypeid='20' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(BEGINTIME,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') < (TO_DATE(?,?)-coalesce(1,1)/1440) THEN 'Yes' ELSE 'No' END ) WHEN rulemode='R' AND a.transtypeid='10' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(sweepcutoff,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') <= (TO_DATE(?,?)+coalesce(a.exectime::int,30)/1440) THEN 'Yes' ELSE 'No' END ) END ) ELSE 'No' END ) end run FROM fo_sp_run_d a, fo_sp_rules_m b, fo_sp_ruleaccount_d c, fo_sp_ruleproducts_d z, fo_transtype_m t, fo_productparameter_m g, fo_group_m e, fo_product_m p WHERE a.ruleid=b.ruleid AND b.ruleid=c.ruleid AND z.RULEID = b.ruleid AND z.deskgroupid = a.deskgroupid AND a.deskgroupid = g.GROUPID AND c.planid=a.planid AND c.status = ? AND z.status = ? AND b.status = ? AND case when b.rulemode = 'R' then a.transtypeid else b.transtypeid end =t.transtypeid AND a.companyid=c.companyid AND a.acctnbr=c.acctnbr AND a.acctnbr=c.acctnbr AND g.GROUPID=e.groupid AND e.prodid=p.prodid
sql.getSweepRunDetailsSelectFour = AND EXISTS ( SELECT DISTINCT b.companyid FROM fo_company_m b, fo_accountmaster_m c WHERE b.companyid = c.companyid AND a.companyid = b.companyid AND EXISTS ( SELECT companyid FROM fo_up_company_m WHERE status = ? AND loginid = ? AND companyid = c.legalentity ) AND companycatid= ? AND b.status = ? AND c.status = ? AND accttypeid= ? )
sql.getSweepRunDetailsSelectFive = UNION SELECT a1.deskgroupid ades,c.companyid, c.planid, a.ruleid, a.runid, z.ddaacct, a.availablebal, a.availabletype, coalesce (f.severity,0)severity, CASE WHEN a.availabletype='D' THEN (SELECT max(lastrefreshed) FROM fo_acct_ddabal_m WHERE acctnbr=z.ddaacct) ELSE CASE WHEN a.availabletype='S' THEN (SELECT max(lastrefreshed) FROM fo_acct_stalebal_m WHERE acctnbr=z.ddaacct) ELSE CASE WHEN a.availabletype='M' THEN TO_CHAR(a.modifieddate,'YYYYMMDDHH24miss') END END END lastrefreshed, e.companyid deskid, coalesce(f.failcnt,0)failcnt, g.groupid gd, e.groupid ed, c.acctnbr, CASE WHEN f.status='F' THEN 'Failed' ELSE CASE WHEN a.execdate=a1.execdate THEN case when a1.status = 'P' then 'Processing' when a1.status = 'Y' then 'Active' when a1.status = 'S' then 'Success' else 'Failed' end ELSE 'Success' END END status, (SELECT refacctnbr || '-'|| acctname FROM fo_accountmaster_m WHERE acctnbr=c.acctnbr)account, (SELECT refacctnbr || '-'|| acctname FROM fo_accountmaster_m WHERE acctnbr=z.ddaacct)accountDDA,
sql.getSweepRunDetailsSelectSix = ( SELECT DISTINCT act2.refacctnbr||'-'|| act2.acctname FROM fo_acct_association_m a11, fo_acct_association_m a1, fo_accountmaster_m act1, fo_accountmaster_m act2 WHERE a11.fromacctnbr = act1.acctnbr AND act1.acctnatureflag = '100' AND a11.groupid = a1.groupid AND a11.groupid = z.groupid AND a1.fromacctnbr = act2.acctnbr AND a1.intposttypeid = '100' AND act2.acctnatureflag = '103' AND a11.toacctnbr = a1.fromacctnbr AND a11.fromacctnbr = c.acctnbr AND a1.toacctnbr= z.ddaacct AND a11.status ='Y' AND a1.status = 'Y' AND act1.status = 'Y' and act2.status='Y' limit 1 ) accountFund,
sql.getSweepRunDetailsSelectSeven = c.value, case when b.approval = 'A' then 'Auto' else 'Manual' end approval, a1.exectime, a.execdate, a.modifieddate, p.prodname, ( CASE WHEN a.rulemode='R' AND a.transtypeid='20' THEN g.BEGINTIME ELSE TO_CHAR ( TO_DATE ( CASE WHEN substr ( COALESCE (sweepcutoff, endtime), 1, 2) = '00' THEN '12' ELSE SUBSTR ( COALESCE (sweepcutoff, endtime), 1, 2) END || SUBSTR ( COALESCE (sweepcutoff, endtime), 3), 'HH:MI PM') - (a1.exectime::INT / 1440), 'HH:MI PM') END ) CUTOFF , b.descr, case when b.rulemode = 'R' then a.transtypeid else b.transtypeid end transtypeid,t.description transtype, b.rulemode, b.ddatype, case when b.rulemode = 'R' then 'Round Trip' else 'Normal' end modeDesc, c.planname, a1.deskgroupid, case when b.approval = 'A' then 'No' else (CASE WHEN a.EXECDATE<=TO_DATE(?,?) THEN (CASE WHEN a.rulemode='N' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(sweepcutoff,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') <= (TO_DATE(?,?)+coalesce(a1.exectime::int,30)/1440) THEN 'Yes' ELSE 'No' END ) WHEN a.rulemode='R' AND a.transtypeid='20' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(BEGINTIME,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') < (TO_DATE(?,?)-coalesce(1,1)/1440) THEN 'Yes' ELSE 'No' END ) WHEN a.rulemode='R' AND a.transtypeid='10' THEN (CASE WHEN TO_DATE(REPLACE(TO_CHAR(TO_DATE(?,?),'DD-MON-YYYY ') || coalesce(coalesce(sweepcutoff,ENDTIME),'05:30 PM'),'00:','12:'),'DD-MON-YYYY HH:MI PM') <= (TO_DATE(?,?)+coalesce(a1.exectime::int,30)/1440) THEN 'Yes' ELSE 'No' END ) END ) ELSE 'No' END ) end run FROM fo_sp_run_h a left outer join fo_sp_productrunfailure_d f on( a.execdate = f.execdate AND a.runid = f.runid ), fo_sp_run_d a1, fo_sp_rules_m b, fo_sp_ruleaccount_d c, fo_sp_ruleproducts_d z, fo_transtype_m t, fo_productparameter_m g, fo_group_m e, fo_product_m p WHERE a.ruleid=b.ruleid AND a.ruleid=a1.ruleid AND a.runid=a1.runid AND b.ruleid=c.ruleid AND z.ruleid = b.ruleid AND a.ruleid = z.ruleid AND z.deskgroupid = a1.deskgroupid AND a1.deskgroupid = g.groupid AND c.status = ? AND z.status = ? AND b.status = ? AND case when b.rulemode = 'R' then a.transtypeid else b.transtypeid end = t.transtypeid AND b.companyid=c.companyid AND g.groupid=e.groupid AND e.prodid=p.prodid
sql.getSweepRunDetailsSelectEight = AND EXISTS ( SELECT DISTINCT b.companyid FROM fo_company_m comp, fo_accountmaster_m c WHERE comp.companyid = c.companyid AND b.companyid = comp.companyid AND EXISTS ( SELECT companyid FROM fo_up_company_m WHERE status = ? AND loginid = ? AND companyid = c.legalentity ) AND companycatid= ? AND comp.status = ? AND c.status = ? AND accttypeid= ? )
sql.getSweepPlanDetails = select distinct m.executiontype from fo_sp_planschedules_m m, fo_sp_ruleaccount_d d  where m.planid = d.planid  and d.ruleid = ?
sql.getAutoApprovalRuleDetailsOne = SELECT a.companyid, a.ddaacctnbr, coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.ddaacctnbr),'') ddaacctname, b.dpool, a.acctnbr, coalesce((SELECT refacctnbr || '-' || acctname FROM fo_accountmaster_m WHERE acctnbr = a.acctnbr),'') acctname, b.value, b.groupid, b.deskgroupid, b.amtpcnt, b.sortorder, a.ruleid, c.descr, coalesce(b.maxAmt,0) maxAmt, a.planid, c.transtypeid transtype, coalesce(c.incramt,0) incramt, c.rulemode, c.ddatype, coalesce(c.targetbal,0) targetbal, c.targetccy, coalesce(c.trigamt,0) trigamt, c.trigccy, c.baltypeid, a.runid, c.createdby, c.invacct, b.ddaacct, g.sweepcutoff, a.execdate, a.exectime, p.executiontype FROM fo_sp_run_d a, fo_sp_ruleproducts_d b, fo_sp_rules_m c, fo_sp_ruleaccount_d d,fo_sp_planschedules_m p, fo_productparameter_m g WHERE a.ruleid=b.ruleid AND b.ruleid=c.ruleid AND a.deskgroupid = g.groupid AND a.deskgroupid =b.deskgroupid AND a.companyid=c.companyid AND d.companyid=a.companyid AND a.planid=d.planid AND a.acctnbr=d.acctnbr and a.planid = p.planid AND b.status = 'Y' AND d.status = 'Y' and p.status = 'Y' AND c.rulemode = 'N' AND a.status = 'Y'
sql.getAutoApprovalRuleDetailsTwo = UNION ALL SELECT a.companyid, a.ddaacctnbr, coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.ddaacctnbr),'') ddaacctname, b.dpool, a.acctnbr, coalesce((SELECT refacctnbr || '-' || acctname FROM fo_accountmaster_m WHERE acctnbr = a.acctnbr),'') acctname, b.value, b.groupid, b.deskgroupid, b.amtpcnt, b.sortorder, a.ruleid, c.descr, coalesce(b.maxAmt,0) maxAmt, a.planid, a.transtypeid transtype, coalesce(c.incramt,0) incramt, c.rulemode, c.ddatype, coalesce(c.targetbal,0) targetbal, c.targetccy, coalesce(c.trigamt,0) trigamt, c.trigccy, c.baltypeid, a.runid, c.createdby, c.invacct, b.ddaacct, g.sweepcutoff, a.execdate, a.exectime, p.executiontype FROM fo_sp_run_d a, fo_sp_ruleproducts_d b, fo_sp_rules_m c, fo_sp_ruleaccount_d d, fo_sp_planschedules_m p,fo_productparameter_m g WHERE a.ruleid=b.ruleid AND b.ruleid=c.ruleid AND a.deskgroupid = g.groupid AND a.deskgroupid =b.deskgroupid AND a.companyid=c.companyid AND d.companyid=a.companyid AND a.planid=d.planid and a.planid = p.planid AND d.status = 'Y' AND b.status = 'Y' AND a.status = 'Y' and p.status = 'Y' AND c.rulemode = 'R' AND a.transtypeid = '10'
sql.getAutoApprovalRuleDetailsThree = UNION ALL SELECT a.companyid, a.ddaacctnbr, coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.ddaacctnbr),'') ddaacctname, b.dpool, a.acctnbr, coalesce((SELECT refacctnbr || '-' || acctname FROM fo_accountmaster_m WHERE acctnbr = a.acctnbr),'') acctname, b.value, b.groupid, b.deskgroupid, b.amtpcnt, b.sortorder, a.ruleid, c.descr, coalesce(b.maxAmt,0) maxAmt, a.planid, a.transtypeid transtype, coalesce(c.incramt,0) incramt, c.rulemode, c.ddatype, coalesce(c.targetbal,0) targetbal, c.targetccy, coalesce(c.trigamt,0) trigamt, c.trigccy, c.baltypeid, a.runid, c.createdby, c.invacct, b.ddaacct, g.sweepcutoff, a.execdate, a.exectime, p.executiontype FROM fo_sp_run_d a, fo_sp_ruleproducts_d b, fo_sp_rules_m c, fo_sp_ruleaccount_d d, fo_sp_planschedules_m p,fo_productparameter_m g WHERE a.ruleid=b.ruleid AND b.ruleid=c.ruleid AND a.deskgroupid = g.groupid AND a.deskgroupid =b.deskgroupid AND a.companyid=c.companyid AND d.companyid=a.companyid AND a.planid=d.planid and a.planid = p.planid AND d.status = 'Y' AND b.status = 'Y' AND a.status = 'Y' and p.status = 'Y' AND c.rulemode = 'R' AND a.transtypeid = '20'
sql.setSweepRunStatusOne = UPDATE fo_sp_run_d SET    status = ?,modifieddate=?,availablebal=?::numeric,availabletype=?
sql.setSweepRunStatusTwo = UPDATE fo_sp_run_h SET	availablebal=?::numeric, availabletype=? WHERE  runid  = ? AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.setSweepRunStatusThree = SELECT COUNT(*) cnt FROM fo_sp_productrunfailure_d WHERE  runid = ? AND status = 'F' AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.setSweepRunStatusFour = UPDATE fo_sp_productrunfailure_d SET    status = ?, reason=?, modifieddate=? WHERE  runid  = ? AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.setSweepRunStatusFive = UPDATE fo_sp_productrunfailure_d SET    status = ?, modifieddate=? WHERE  runid  = ? AND TRUNC(execdate)=TRUNC(TO_DATE(?,?))
sql.getRuleProductFailureOne = SELECT * FROM ( SELECT s.*,COUNT(*) OVER() as cnt,row_number() over() as rnum FROM ( SELECT DISTINCT a.runid, b.descr rulename, b.ddatype, a.companyid, coalesce((select companyname from fo_company_m fcm_m where companyid = a.companyid), '') companyname, c.planname, prod.prodname, a.groupid, a.ddaacctnbr, a.swpacctnbr, coalesce((SELECT acctname FROM fo_accountmaster_m WHERE acctnbr = a.swpacctnbr),'') swpacctname, coalesce((SELECT refacctnbr FROM fo_accountmaster_m WHERE acctnbr = a.swpacctnbr),'') swprefacctnbr, (CASE WHEN a.ddaacctnbr IS NOT NULL THEN (SELECT acctbal FROM FO_ACCT_STALEBAL_M WHERE acctnbr = a.ddaacctnbr) ELSE 0 END )acctbal, (CASE WHEN a.ddaacctnbr IS NOT NULL THEN (SELECT lastrefreshed FROM fo_acct_stalebal_m WHERE acctnbr = a.ddaacctnbr) ELSE '' END )lastrefreshed, coalesce((SELECT acctname FROM fo_settlementaccounts_m WHERE acctnbr = a.ddaacctnbr),'') ddaacctname, coalesce((SELECT refacctnbr FROM fo_settlementaccounts_m WHERE acctnbr = a.ddaacctnbr),'') ddarefacctnbr, acct.refacctnbr||'-'||acct.acctname accountname, acct.refacctnbr refacctnbr, a.value, a.amtpcnt, ( case a.amtpcnt when '1' then 'Amount' when '2' then 'Percentage' end ) typedesc, a.transtypeid, t.description transtype , a.incramt, a.maxamt, ( case a.rulemode when 'R' then 'Round Trip' when 'N' then 'Normal' end ) rulemodedesc, a.targetbal, a.targetccy, a.trigamt, a.trigccy, bal.descr baltypeid, m.firstname || m.lastname createdby, a.execdate, a.exectime, a.createddate, a.reason, a.status, a.tradeamount, s.descr severity FROM fo_sp_productrunfailure_d a, fo_sp_rules_m b,fo_sp_ruleaccount_d c, fo_transtype_m t,fo_group_m g, fo_sp_run_d d, fo_accountmaster_m acct , fo_product_m prod , fo_group_m gr, fo_sp_balancetype_m bal , fo_member_m m,fo_sp_severity_m s WHERE g.groupid = a.groupid AND g.prodid = prod.prodid AND g.status =? AND a.ruleid= b.ruleid AND a.planid = c.planid AND t.transtypeid = a.transtypeid AND a.acctnbr = c.acctnbr AND c.companyid = a.companyid AND b.companyid = a.companyid AND gr.prodid = g.prodid AND gr.currencycode = g.currencycode AND gr.status = 'Y'
sql.getRuleProductFailureTwo = AND EXISTS ( SELECT DISTINCT b.companyid FROM fo_company_m b, fo_accountmaster_m c WHERE b.companyid = c.companyid AND b.companyid = a.companyid AND companycatid= ? AND b.status = ? AND c.status = ? AND accttypeid= ? )
sql.getRuleProductFailureThree = AND EXISTS ( SELECT DISTINCT b.companyid FROM fo_company_m AS b, fo_accountmaster_m AS c WHERE cparentid != '0000' AND c.legalentity = b.companyid AND b.status = 'Y' AND b.companycatid = ? and b.companyid = c.companyid AND EXISTS (WITH RECURSIVE t (companyid) AS (SELECT companyid FROM fo_company_m WHERE companyid IN (SELECT up.companyid FROM fo_up_company_m AS up, fo_company_m AS c WHERE up.companyid = c.companyid AND up.loginid = ? AND up.status = 'Y' AND c.status = 'Y') UNION ALL SELECT t_2.companyid FROM fo_company_m AS t_2, t WHERE t.companyid = t_2.parentid) SELECT companyid FROM t ) AND companycatid= ? AND b.status = ? AND c.status = ? AND accttypeid= ? )
sql.getDistinctSweepRuleNamesOne = SELECT DISTINCT upper(descr) descr FROM	fo_sp_rules_m WHERE	status = 'Y'
sql.getDistinctSweepRuleNamesTwo = UNION SELECT DISTINCT upper(descr) descr FROM   fo_sp_rules_m a left outer join fo_mc_buildprocess_m b on(a.mcprocessid = b.processid AND    b.type != 'D') WHERE    a.status='Y'
sql.getMCPlanDetailsOne = SELECT * FROM ( SELECT rt.*, ROW_NUMBER () OVER (PARTITION BY ruleid ORDER BY moddate DESC)rn FROM ( SELECT a.planid, planname, a.acctnbr, a.companyid, plantype plantypeid, a.dpool, (SELECT refacctnbr || '-' || acctname FROM fo_accountmaster_m WHERE acctnbr = a.acctnbr) account, ( case plantype when 'S' then 'Single' else 'Multiple' end ) plantype, andor andorid, ( case andor when '0' then 'AND' else 'OR' end ) andor, sortorder, a.ruleid, a.ddaacctnbr, c.rulemode, c.ddatype, c.descr rulename, b.schtypeid,b.executionType,b.executionTime, b.fromdate, b.todate, b.exectime, c.invacct, c.ddaacct, b.holiday holidayid, ( case b.holiday when 'S' then 'Skip' when 'B' then 'Before' else 'After' end ) holiday , r.status mcstatus, r.createdby, r.createddate, r.modifieddate, r.modifiedby, coalesce ( coalesce (r.modifieddate, r.approveddate), r.createddate ) moddate FROM fo_sp_ruleaccount_d a, fo_sp_planschedules_m b, fo_sp_rules_m c left outer join fo_mc_buildprocess_m r on(c.mcprocessid = r.processid AND r.type != 'D') WHERE a.companyid = ? AND a.mcprocessid = b.mcprocessid AND b.mcprocessid = c.mcprocessid AND a.planid = b.planid AND a.ruleid = c.ruleid
sql.getMCPlanDetailsTwo = SELECT * FROM (SELECT rt.*, ROW_NUMBER () OVER (PARTITION BY specday ORDER BY moddate DESC)rn FROM (SELECT DISTINCT a.planid, specday, (SELECT descr FROM fo_weekday_m WHERE dayid = specday) as DAY, specdate, schtypeid, r.status mcstatus, r.createdby, r.createddate, r.modifieddate, r.modifiedby, coalesce (coalesce (r.modifieddate, r.accepteddate), r.createddate ) moddate FROM fo_sp_ruleaccount_d a , fo_sp_planschedules_d b, fo_sp_planschedules_m c, fo_mc_buildprocess_m r WHERE a.planid = b.planid AND a.mcprocessid = b.mcprocessid AND b.mcprocessid = c.mcprocessid AND c.mcprocessid = r.processid AND c.planid = b.planid AND b.planid = ? AND r.type != 'D'
sql.getMCPlanDetailsThree = SELECT * FROM (SELECT rt.*, ROW_NUMBER () OVER (PARTITION BY planid ORDER BY moddate DESC) rn FROM (SELECT DISTINCT a.planid, daydate, exceptdate, exceptday, (SELECT descr FROM fo_weekday_m WHERE dayid = exceptday) as DAY, r.status mcstatus, r.createdby, r.createddate, r.modifieddate, r.modifiedby, coalesce (coalesce (r.modifieddate, r.accepteddate), r.createddate ) moddate FROM fo_sp_ruleaccount_d a, fo_sp_ruleexceptons_m b, fo_mc_buildprocess_m r WHERE a.planid = b.planid AND a.mcprocessid = b.mcprocessid AND b.mcprocessid = r.processid AND b.planid = ? AND r.type != 'D'
sql.checkSettleAccountByGrpId=select count(*) from fo_acct_association_m aa ,fo_accountmaster_m a where a.acctnbr = aa.toacctnbr and fromacctnbr = ? and toacctnbr = ? and a.status = ? and aa.status = ? and toaccttype = ? and groupid = ?
sql.insertAcctAssoc  = INSERT INTO fo_acct_association_m (groupid, fromacctnbr,toacctnbr,fromaccttype,toaccttype,status,createdby,createddate,intposttypeid) VALUES      (?,?,?,?,?,?,?,?,?)
sql.updateAcctAssocByGrpId=UPDATE fo_acct_association_m SET status = ? WHERE groupid = ? AND fromacctnbr = ? AND toacctnbr = ? AND fromaccttype = ? AND toaccttype = ? AND intposttypeid = ?
sql.updateSettAcctByGrpId=UPDATE fo_acct_clientsettlement_m SET status = ? WHERE groupid = ? AND acctnbr = ?
sql.insertClientSettAcct=INSERT INTO fo_acct_clientsettlement_m (groupid,setlprodid,acctnbr,status,createdby) VALUES(?,?,?,?,?)
sql.getSweepDeatilsQueryForDelete = select mcprocessid from fo_sp_rules_m where ruleid=? 
sql.getVirtualAccountsForActualAccount = select vaccountnbr,vaccountname,currencycode,vrefacctnbr from fo_vam_account_m
